@model BusinessManager.Core.Models.POSSale

@{
    ViewBag.Title = "POS Transaction Checkout";
    string customGray = "#ced8e4";
    string primaryBlue = "#337ab7";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <style>
        .POSTransactionCheckout-fixed-header tbody {
            display: block;
            overflow: auto;
            height: 685px;
            width: 100%;
        }

        .CustomerManagerInvoices-fixed_header thead tr {
            display: block;
        }
    </style>
    <h4 style="padding: 15px 10px 0px 10px"><span class="fas fa-cash-register" style="font-size: x-large">&nbsp;&nbsp;</span><span class="fas fa-check" style="font-size: x-large">&nbsp;&nbsp;</span>POS Transaction Checkout</h4>
    <hr style="margin-bottom: 5px" />
    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        @{
            string labelWidth = "col-md-4";
            string fieldWidth = "col-md-8";
            string maxfieldWidth = "100%";
            string fieldStyle = "padding-left: 0; padding-right: 0";
            string inputGroupStyle = "margin: 3px 0 3px 0; padding: 0 0 0 0";
            string inputStyle1 = "margin-left: 0; margin-right: 0";
        }

        <div class="col-md-6" style="background-color: @primaryBlue; margin: 0 15px 0 0; padding: 15px 15px 5px 15px; max-width: 45%; height: 730px; border-radius: 5px">
            <div class="col-md-12" style="padding-top: 12px; border-radius: 5px; background-color: @customGray">

                <div class="form-group" style="display: none">
                    <div>
                        @Html.Hidden("CustomerId")
                    </div>
                </div>

                <div class="form-group" style="@inputGroupStyle">
                    @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label " + @labelWidth })
                    <div class=@fieldWidth style="@fieldStyle">
                        @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control input-sm", @style = "max-width: " + @maxfieldWidth + ";" + @inputStyle1 } })
                        @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group" style="@inputGroupStyle">
                    @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label " + @labelWidth })
                    <div class=@fieldWidth style="@fieldStyle">
                        @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control input-sm", @style = "max-width: " + @maxfieldWidth + ";" + @inputStyle1 } })
                        @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group" style="@inputGroupStyle">
                    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label " + @labelWidth })
                    <div class=@fieldWidth style="@fieldStyle">
                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control input-sm", @style = "max-width: " + @maxfieldWidth + ";" + @inputStyle1 } })
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group" style="@inputGroupStyle">
                    @Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "control-label " + @labelWidth })
                    <div class=@fieldWidth style="@fieldStyle">
                        @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control input-sm", @style = "max-width: " + @maxfieldWidth + ";" + @inputStyle1 } })
                        @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group" style="@inputGroupStyle">
                    @Html.LabelFor(model => model.CompanyName, htmlAttributes: new { @class = "control-label " + @labelWidth })
                    <div class=@fieldWidth style="@fieldStyle">
                        @Html.EditorFor(model => model.CompanyName, new { htmlAttributes = new { @class = "form-control input-sm", @style = "max-width: " + @maxfieldWidth + ";" + @inputStyle1 } })
                        @Html.ValidationMessageFor(model => model.CompanyName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group" style="@inputGroupStyle">
                    @Html.LabelFor(model => model.Street, htmlAttributes: new { @class = "control-label " + @labelWidth })
                    <div class=@fieldWidth style="@fieldStyle">
                        @Html.EditorFor(model => model.Street, new { htmlAttributes = new { @class = "form-control input-sm", @style = "max-width: " + @maxfieldWidth + ";" + @inputStyle1 } })
                        @Html.ValidationMessageFor(model => model.Street, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group" style="@inputGroupStyle">
                    @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label " + @labelWidth })
                    <div class=@fieldWidth style="@fieldStyle">
                        @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control input-sm", @style = "max-width: " + @maxfieldWidth + ";" + @inputStyle1 } })
                        @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group" style="@inputGroupStyle">
                    @Html.LabelFor(model => model.State, htmlAttributes: new { @class = "control-label " + @labelWidth })
                    <div class=@fieldWidth style="@fieldStyle">
                        @Html.EditorFor(model => model.State, new { htmlAttributes = new { @class = "form-control input-sm", @style = "max-width: " + @maxfieldWidth + ";" + @inputStyle1 } })
                        @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group" style="@inputGroupStyle">
                    @Html.LabelFor(model => model.ZipCode, htmlAttributes: new { @class = "control-label " + @labelWidth })
                    <div class=@fieldWidth style="@fieldStyle">
                        @Html.EditorFor(model => model.ZipCode, new { htmlAttributes = new { @class = "form-control input-sm", @style = "max-width: " + @maxfieldWidth + ";" + @inputStyle1 } })
                        @Html.ValidationMessageFor(model => model.ZipCode, "", new { @class = "text-danger" })
                    </div>
                </div>

                @* *********************************************************************************************************** *@
                <div class="form-group">
                    <label class="control-label @labelWidth">Sale Summary</label>
                    <div class="@fieldWidth" style="margin-top: 5px">
                        <div class="bg-info" style="height: 1px; margin: 0 0 0 0; max-width: 100%"></div> @* used to draw line *@
                        <strong style="padding-top: 0; margin-top: 3px">
                            Items: @Model.TotalItemCount   <br />
                            Amount: @string.Format("{0:c}", Model.TotalAmount)
                        </strong>
                        <div class="bg-info" style="height: 1px; margin: 0 0 0 0; max-width: 100%"></div> @* used to draw line *@
                    </div>
                </div>
                @* *********************************************************************************************************** *@

                @{
                    var itemCount = Model.TotalItemCount;
                    ViewBag.TotalCharges = Model.TotalAmount;
                }
            </div>

            <div class="col-md-12" style="padding: 0">
                @Html.Partial("PaymentForm")
            </div>

            <div class="form-group col-md-12">
                <input onclick="processPayment(event, @itemCount)" type="submit" value="Accept Payment" class="btn btn-default btn-sm pull-right" style="margin-right: 70px" />
                <div id="submitted" style="display: none; "></div>
            </div>
        </div>

        @* Customer list div *@
        <div class="col-md-6 POSTransactionCheckout-fixed-header" style="flex: 1; padding-left: 0; padding-right: 0">
            @Html.Partial("CustomerList", Model.Customers)
        </div>
    </div>
}

<div class="col-md-12" style="margin: 0; padding: 0">
    @Html.ActionLink("Back to POS Transaction", "Index")
</div>

@section Scripts {
    <script type="text/javascript">
        /////////////////////////////////////////////////////////////////////////////////////////////

        function getCustomer(event) {
            event.preventDefault();
            let customerId = event.target.querySelector("Span").innerText;
            var xhttp = new XMLHttpRequest();
            xhttp.open("GET", "/POSTransaction/GetCustomer/?Id=" + customerId, true);
            xhttp.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
            xhttp.onreadystatechange = function () {
                if (this.readyState === 4 && this.status === 200) {
                    //
                    var responseText = this.responseText;
                    let customer = JSON.parse(responseText);
                    fillCustomerForm(customer);
                }
            };
            xhttp.send();
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function fillCustomerForm(customer) {
            document.getElementById("FirstName").value = customer.FirstName;
            document.getElementById("LastName").value = customer.LastName;
            document.getElementById("Email").value = customer.Email;
            document.getElementById("Phone").value = customer.Phone;
            document.getElementById("CompanyName").value = customer.CompanyName;
            document.getElementById("Street").value = customer.Street;
            document.getElementById("City").value = customer.City;
            document.getElementById("State").value = customer.State;
            document.getElementById("ZipCode").value = customer.ZipCode;
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function processPayment(event, itemCount) {
            var test = document.getElementById("submitted").innerText
            if (test) {
                location.assign("/POSTransaction");
                document.getElementById("submitted").innerText = "yes";
                event.preventDefault();
            }
            if (!itemCount) {
                event.preventDefault();
                alert("There are no items to process.")
            }
            document.getElementById("submitted").innerText = "yes";

            //
            // code to execute payment goes here
            //
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function setPaymentMode(event) {
            var btn = event.target;
            var optSelected = btn.title;

            var paymentModeInput = document.querySelector("[name='PaymentMode']");
            paymentModeInput.value = optSelected;

            var creditcardGrp = document.querySelector("[id='creditcard-group']");
            var checkGrp = document.querySelector("[id='check-group']");
            var cashGrp = document.querySelector("[id='cash-group']");
            var amount = document.querySelector("[name='Amount']");

            switch (optSelected) {
                case "credit card":
                    amount.removeAttribute("readonly");
                    cashGrp.classList.add("hidden");
                    creditcardGrp.classList.remove("hidden");
                    checkGrp.classList.add("hidden");
                    break;
                case "check":
                    amount.removeAttribute("readonly");
                    cashGrp.classList.add("hidden");
                    creditcardGrp.classList.add("hidden");
                    checkGrp.classList.remove("hidden");
                    break;
                default:
                    cashGrp.classList.remove("hidden");
                    creditcardGrp.classList.add("hidden");
                    checkGrp.classList.add("hidden");
                    amount.setAttribute("readonly", "");
                    return;
            }
        }
    </script>
}
