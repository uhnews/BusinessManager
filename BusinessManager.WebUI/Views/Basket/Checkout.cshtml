@model BusinessManager.Core.Models.Order

@{
    ViewBag.Title = "Order Checkout";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4 style="padding: 15px 10px 0px 10px"><span class="fa fa-shopping-cart" style="font-size: x-large">&nbsp;&nbsp;</span><span class="fas fa-check" style="font-size: x-large">&nbsp;&nbsp;</span>Order Checkout</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        @{
            string labelWidth = "col-md-3";
            string fieldWidth = "col-md-8";
            string maxfieldWidth = "100%";
        }
        <div class="col-md-6">
            <div class="form-group">
                <div class="d-none">
                    @Html.Hidden("CustomerId")
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label " + @labelWidth })
                <div class=@fieldWidth>
                    @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", @style = "max-width: " + @maxfieldWidth } })
                    @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label " + @labelWidth })
                <div class=@fieldWidth>
                    @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control", @style = "max-width: " + @maxfieldWidth } })
                    @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label " + @labelWidth })
                <div class=@fieldWidth>
                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @style = "max-width: " + @maxfieldWidth } })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "control-label " + @labelWidth })
                <div class=@fieldWidth>
                    @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control", @style = "max-width: " + @maxfieldWidth } })
                    @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CompanyName, htmlAttributes: new { @class = "control-label " + @labelWidth })
                <div class=@fieldWidth>
                    @Html.EditorFor(model => model.CompanyName, new { htmlAttributes = new { @class = "form-control", @style = "max-width: " + @maxfieldWidth } })
                    @Html.ValidationMessageFor(model => model.CompanyName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Street, htmlAttributes: new { @class = "control-label " + @labelWidth })
                <div class=@fieldWidth>
                    @Html.EditorFor(model => model.Street, new { htmlAttributes = new { @class = "form-control", @style = "max-width: " + @maxfieldWidth } })
                    @Html.ValidationMessageFor(model => model.Street, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label " + @labelWidth })
                <div class=@fieldWidth>
                    @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control", @style = "max-width: " + @maxfieldWidth } })
                    @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.State, htmlAttributes: new { @class = "control-label " + @labelWidth })
                <div class=@fieldWidth>
                    @Html.EditorFor(model => model.State, new { htmlAttributes = new { @class = "form-control", @style = "max-width: " + @maxfieldWidth } })
                    @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ZipCode, htmlAttributes: new { @class = "control-label " + @labelWidth })
                <div class=@fieldWidth>
                    @Html.EditorFor(model => model.ZipCode, new { htmlAttributes = new { @class = "form-control", @style = "max-width: " + @maxfieldWidth } })
                    @Html.ValidationMessageFor(model => model.ZipCode, "", new { @class = "text-danger" })
                </div>
            </div>

            @* *********************************************************************************************************** *@
            <div class="form-group">
                <label class="control-label @labelWidth">Sale Summary</label>
                <div class="@fieldWidth text-primary" style="margin-top: 5px">
                    <div class="bg-primary" style="height: 1px; margin: 0"></div>
                    <h4 style="padding-top: 0; margin-top: 3px">
                        Items: @Model.TotalItemCount   <br />
                        Amount: @string.Format("{0:c}", Model.TotalAmount)
                    </h4>
                    <div class="bg-primary" style="height: 1px; margin-top: -3px"></div>
                </div>
            </div>
            @* *********************************************************************************************************** *@

            @{
                var itemCount = Model.TotalItemCount;
            }
            <div class="form-group">
                <div class="col-md-offset-3 col-md-9">
                    <input onclick="processPayment(event, @itemCount)" type="submit" value="Proceed to Payment" class="btn btn-default" />
                    <div id="submitted" style="display: none; "></div>
                </div>
            </div>
        </div>
    </div>
}

<div class="col-md-12">
    @Html.ActionLink("Back to Basket", "Index")
</div>

@section Scripts {
    <script type="text/javascript">

        function processPayment(event, itemCount) {
            var test = document.getElementById("submitted").innerText
            if (test) {
                location.assign("/Basket");
                document.getElementById("submitted").innerText = "yes";
                event.preventDefault();
            }
            if (!itemCount) {
                event.preventDefault();
                alert("There are no items to process.")
            }
            document.getElementById("submitted").innerText = "yes";

            //
            // code to execute payment goes here
            //
        }

    </script>
}
