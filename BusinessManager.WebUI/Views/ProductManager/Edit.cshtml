@model BusinessManager.Core.ViewModels.ProductManagerViewModel

@{
    ViewBag.Title = "Edit Product";
}

<h2>Edit Product</h2>


@using (Html.BeginForm("Edit", "ProductManager", FormMethod.Post, new { encType = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Product.Id)

        <div class="col-md-2">
            <img id="product-image" class="img-responsive" src="~/Content/ProductImages/@Model.Product.Image" alt="Image" />
        </div>

        <div class="col-md-10">
            <div class="form-group">
                @Html.LabelFor(model => model.Product.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Product.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Product.Name, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Product.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Product.Description, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Product.Description, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Product.Price, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Product.Price, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Product.Price, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Product.WholesalePrice, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Product.WholesalePrice, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Product.WholesalePrice, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Product.SupplierPrice, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Product.SupplierPrice, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Product.SupplierPrice, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Product.Category, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.Product.Category, new SelectList(Model.ProductCategories, "Category", "Category"), htmlAttributes: new { @class = "control-label col-md-2" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Product.Quantity, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Product.Quantity, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Product.Quantity, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Product.QuantityMin, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Product.QuantityMin, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Product.QuantityMin, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Product.UPC, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Product.UPC, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Product.UPC, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Product.ProductCode, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Product.ProductCode, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Product.ProductCode, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Product.Image, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <input type="file" id="file" name="file" class="form-control hidden" />
                    <a class="btn btn-primary" href="#"><label style="margin-top: 3px; cursor: pointer; max-height: 10px" for="file"><span class="far fa-image" style="font-size: large">&nbsp;&nbsp;</span>Select New Image File</label></a>
                    <p id="image-message" class="text-danger" style="margin-top: 10px; margin-bottom: 0"></p>
                </div>
            </div>

            <div class="form-group form-check">
                @Html.LabelFor(model => model.Product.IsService, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.CheckBoxFor(model => model.Product.IsService, htmlAttributes: new { @class = "form-check-input" })
                    @Html.ValidationMessageFor(model => model.Product.IsService, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input onclick="validateProductCodes(event)" type="button" value="Save" class="btn btn-default" />
                    <input id="submit-btn" type="submit" value="Save" class="btn btn-default" style="display: none" />
                </div>
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">

        document.getElementById("file").onchange = function () {
            let message = ("New file selected: " + this.value).replace("C:\\fakepath\\", "");
            document.getElementById('image-message').innerText = message;
        };

        async function validateProductCodes(event) {
            var productId = document.getElementById("Product_Id").value;
            var upc = document.getElementById("Product_UPC").value;
            var productCode = document.getElementById("Product_ProductCode").value;
            var promise1 = new Promise(function (resolve, reject) {
            var xhttp = new XMLHttpRequest();
                xhttp.open("GET", "/ProductManager/CheckForUniqueCodes/?upc=" + upc + "&productCode=" + productCode + "&exceptId=" + productId, true);
                xhttp.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
                xhttp.onreadystatechange = function () {
                    if (this.readyState === 4 && this.status === 200) {                        
                        var responseText = this.responseText;

                        if (responseText) {
                            resolve(responseText); 
                        }
                        else {
                            alert("ERROR IN THE RESPONSE!!");
                        }
                    }
                };
                xhttp.send();
            });
            var serverText = await promise1;
            var responseObject = JSON.parse(serverText);

            if (responseObject.UPC === false && responseObject.ProductCode === false) {
                document.getElementById("submit-btn").click();
            }
            else {
                if (responseObject.UPC === true) {
                    alert("UPC '" + upc + "' already exists.")
                }
                if (responseObject.ProductCode === true) {
                    alert("ProductCode '" + productCode + "' already exists.")
                }
            }            
        }

    </script>
}
