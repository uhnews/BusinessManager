@using BusinessManager.Core.Models
@model Customer

@{
    ViewBag.Title = "Edit Customer";
    ViewBag.CustomerId = Model.Id;
    ViewBag.Prducts = Model.ProductList;
    //string customGray = "#adbfd2";
    string customGray = "#ced8e4";
    string customGrayWhite = "#fcfdfd";
}

@using (Html.BeginForm("Edit", "CustomerManager", FormMethod.Post, new { onsubmit = "return false", id = "customer-edit-form" }))
{
    @Html.AntiForgeryToken()

    <h2>Edit Customer</h2>
    <hr style="margin-top: 0; margin-bottom: 0" />
    <style>
        .product-lookup-popup {
            position: absolute;
            left: 0;
            top: 0;
        }
    </style>

    <div id="tab-selector-btns" class="col-md-12" style="margin-top: -32px">
        @* Subform-Selection Buttons *@
        <div class="btn-group pull-right" style="margin-top: 3px; margin-bottom: 0px; display: block">
            <button onclick="showPOSSales(event)"
                    id="show-possales-btn"
                    type="button"
                    style="border-bottom-left-radius: 0 !important" ;
                    class="btn btn-default btn-sm">
                POS Sales
            </button>
            <button onclick="showInvoices(event)"
                    id="show-invoices-btn"
                    type="button"
                    class="btn btn-default btn-sm">
                Invoices
            </button>
            <button onclick="showLayaways(event)"
                    id="show-layaways-btn"
                    type="button"
                    class="btn btn-default btn-sm">
                Layaways
            </button>
            <button onclick="showOnlineOrders(event)"
                    id="show-onlineorders-btn"
                    type="button"
                    class="btn btn-default btn-sm">
                Online Orders
            </button>
            <button onclick="showAttachments(event)"
                    id="show-attachments-btn"
                    type="button"
                    class="btn btn-default btn-sm">
                Attachments
            </button>
            <button onclick="showCustomerNotes(event)"
                    id="show-customernotes-btn"
                    type="button"
                    style="border-bottom-right-radius: 0 !important" ;
                    class="btn btn-default btn-sm">
                Notes
            </button>
        </div>
    </div>

    <div id="customer-form" style="display: flex; border-radius: 5px" class="border">
        <div id="customer-section" class="form-horizontal col-md-4" style="padding: 10px; border-radius: 5px 0 0 5px; background-color: @customGray">
            <div id="customer-info" style="background-color: @customGrayWhite; opacity: 1; margin: 10px 0 0 10px; padding-right: 10px; width: 100%;">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.Id)
                @Html.HiddenFor(model => model.UserId)

                @{
                    var labelStyle = "width: 35%; padding-right: 0";
                    var inputBoxStyle = "width: 95%; margin-left: 15px; margin-right: 0";
                }
                <div class="form-group">
                    @Html.LabelFor(model => model.CreatedAt, htmlAttributes: new { @class = "control-label col-md-3", @style = @labelStyle })
                    <div class="col-md-7" style="padding-top: 5px">
                        @Html.DisplayFor(model => model.CreatedAt, new { htmlAttributes = new { @class = "form-control", @style = @inputBoxStyle } }).ToString().Replace("-07:00", "")
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-3", @style = @labelStyle })
                    <div class="col-md-7" style="padding: 0">
                        @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control input-sm", @style = @inputBoxStyle } })
                        @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-3", @style = @labelStyle })
                    <div class="col-md-7" style="padding: 0">
                        @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control input-sm", @style = @inputBoxStyle } })
                        @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-3", @style = @labelStyle })
                    <div class="col-md-7" style="padding: 0">
                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control input-sm", @style = @inputBoxStyle } })
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "control-label col-md-3", @style = @labelStyle })
                    <div class="col-md-7" style="padding: 0">
                        @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control input-sm", @style = @inputBoxStyle } })
                        @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Phone2, htmlAttributes: new { @class = "control-label col-md-3", @style = @labelStyle })
                    <div class="col-md-7" style="padding: 0">
                        @Html.EditorFor(model => model.Phone2, new { htmlAttributes = new { @class = "form-control input-sm", @style = @inputBoxStyle } })
                        @Html.ValidationMessageFor(model => model.Phone2, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.CompanyName, htmlAttributes: new { @class = "control-label col-md-3", @style = @labelStyle })
                    <div class="col-md-7" style="padding: 0">
                        @Html.EditorFor(model => model.CompanyName, new { htmlAttributes = new { @class = "form-control input-sm", @style = @inputBoxStyle } })
                        @Html.ValidationMessageFor(model => model.CompanyName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Street, htmlAttributes: new { @class = "control-label col-md-3", @style = @labelStyle })
                    <div class="col-md-7" style="padding: 0">
                        @Html.EditorFor(model => model.Street, new { htmlAttributes = new { @class = "form-control input-sm", @style = @inputBoxStyle } })
                        @Html.ValidationMessageFor(model => model.Street, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label col-md-3", @style = @labelStyle })
                    <div class="col-md-7" style="padding: 0">
                        @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control input-sm", @style = @inputBoxStyle } })
                        @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.State, htmlAttributes: new { @class = "control-label col-md-3", @style = @labelStyle })
                    <div class="col-md-7" style="padding: 0">
                        @Html.EditorFor(model => model.State, new { htmlAttributes = new { @class = "form-control input-sm", @style = @inputBoxStyle } })
                        @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ZipCode, htmlAttributes: new { @class = "control-label col-md-3", @style = @labelStyle })
                    <div class="col-md-7" style="padding: 0">
                        @Html.EditorFor(model => model.ZipCode, new { htmlAttributes = new { @class = "form-control input-sm", @style = @inputBoxStyle } })
                        @Html.ValidationMessageFor(model => model.ZipCode, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Website, htmlAttributes: new { @class = "control-label col-md-3", @style = @labelStyle })
                    <div class="col-md-7" style="padding: 0">
                        @Html.EditorFor(model => model.Website, new { htmlAttributes = new { @class = "form-control input-sm", @style = @inputBoxStyle } })
                        @Html.ValidationMessageFor(model => model.Website, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="form-group">
                    <button onclick="saveCustomer(event)"
                            id="save-customer-btn"
                            type="submit"
                            style="margin-right: 10%"
                            class="btn btn-default btn-sm pull-right">
                        Save
                        <span style="margin-left: 5px" class="glyphicon glyphicon-edit"></span>
                    </button>
                    <p class="col-md-12" style="margin: 30px 10px 10px 10px">@Html.ActionLink("Back to Customer List", "Index")</p>
                </div>
            </div>

            <div id="product-lookup" class="product-lookup-popup hidden" style="background-color: @customGrayWhite">
                @Html.Partial("ProductLookup", Model.ProductList)
                <button id="close-productlookup-form-btn" onclick="closeProductLookup(event)" class="btn btn-default btn-sm pull-right" style="margin: 6px 20px 15px 5px">
                    Close List
                </button>
                <div style="margin: 0 0 0 25px">@Html.ActionLink("Back to Customer List", "Index")</div>
            </div>
        </div>

        <div id="alt-subform-container" class="col-md-8" style="padding: 0; margin: 0; border-radius: 0 5px 5px 0; background-color: @customGray">

        </div>

        <div id="attachments-container" class="col-md-8 hidden" style="padding: 0; margin: 0; border-radius: 0 5px 5px 0; background-color: @customGray">
            @{
                var attachmentCount = Model.Attachments.Count;
                var attachmentFullName = Model.FirstName + ' ' + Model.LastName;
                var attachmentCompanyName = Model.CompanyName == "" ? "" : " (" + Model.CompanyName + ")";
                var attachmentCombinedName = attachmentFullName + attachmentCompanyName;
            }
            <span id="curr-attachment-id" style="display: none"></span>
            <div style="margin: 0px 0px 5px 25px">
                <div style="margin: 20px 0 10px 0">
                    <h4 style="display: inline">Attachments</h4>
                    <input type="file" id="file" name="file" class="form-control hidden" />
                    <button onclick="addAttachment(event)"
                            id="add-attachment-btn"
                            type="button"
                            style="margin: -3px 30px 0 0; padding: 2px 10px !important"
                            class="btn btn-default btn-xs btn-danger-text pull-right">
                        Add Attachment
                    </button>
                </div>
                <div>
                    <strong>
                        <span class="text-primary" style="float: right; margin:3px 30px 3px 3px">@attachmentCombinedName</span>
                        <span style="float: right; margin:3px 10px 3px 3px">Customer: </span>
                    </strong>
                    <span style="margin: 3px 13px 3px 3px">Attachments: @attachmentCount</span>
                </div>
            </div>
            @Html.Partial("Attachments", Model.Attachments)
        </div>

        <div id="customernotes-container" class="col-md-8 hidden" style="padding: 0; margin: 0; border-radius: 0 5px 5px 0; background-color: @customGray">
            @{
                var customernoteCount = Model.CustomerNotes.Count;
                var customernoteFullName = Model.FirstName + ' ' + Model.LastName;
                var customernoteCompanyName = Model.CompanyName == "" ? "" : " (" + Model.CompanyName + ")";
                var customernoteCombinedName = customernoteFullName + customernoteCompanyName;
            }
            <span id="curr-customernote-id" style="display: none"></span>
            <div style="margin: 0px 0px 5px 25px">
                <div style="margin: 20px 0 10px 0">
                    <h4 style="display: inline">Notes</h4>
                    <button onclick="addCustomerNote(event)"
                            id="add-customernote-btn"
                            type="button"
                            style="margin: -3px 30px 0 0; padding: 2px 10px !important"
                            class="btn btn-default btn-xs btn-danger-text pull-right">
                        Add Note
                    </button>
                </div>
                <div>
                    <strong>
                        <span class="text-primary" style="float: right; margin:3px 30px 3px 3px">@customernoteCombinedName</span>
                        <span style="float: right; margin:3px 10px 3px 3px">Customer: </span>
                    </strong>
                    <span style="margin: 3px 13px 3px 3px">Notes: @customernoteCount</span>
                </div>
            </div>
            @Html.Partial("CustomerNotes", Model.CustomerNotes)
        </div>

        <div id="possales-container" class="col-md-8 hidden" style="padding: 0; margin: 0; border-radius: 0 5px 5px 0; background-color: @customGray">
            @{
                var possaleItemCount = 0;
                var possaleCount = Model.Layaways.Count;
                foreach (var possale in Model.POSSales)
                {
                    possaleItemCount += possale.POSSaleItems.Sum(s => s.Quantity);
                }
                var possaleFullName = Model.FirstName + ' ' + Model.LastName;
                var possaleCompanyName = Model.CompanyName == "" ? "" : " (" + Model.CompanyName + ")";
                var possaleCombinedName = possaleFullName + possaleCompanyName;
            }
            <span id="curr-possale-id" style="display: none"></span>
            <div style="margin: 0px 0px 5px 25px">
                <div style="margin: 20px 0 10px 0">
                    <h4 style="display: inline">POS Sales</h4>
                    <button onclick="addPOSSale(event)"
                            id="add-possale-btn"
                            type="button"
                            style="margin: -3px 30px 0 0; padding: 2px 10px !important"
                            class="btn btn-default btn-xs btn-danger-text hidden pull-right">
                        Add Sale
                    </button>
                </div>
                <div>
                    <strong>
                        <span class="text-primary" style="float: right; margin:3px 30px 3px 3px">@possaleCombinedName</span>
                        <span style="float: right; margin:3px 10px 3px 3px">Customer: </span>
                    </strong>
                    <span style="margin: 3px 13px 3px 3px">Sales: @possaleCount</span>Total Items:
                    <span name="item-count" style="margin: 3px">@possaleItemCount</span>
                </div>
            </div>
            @Html.Partial("POSSales", Model.POSSales)
        </div>

        <div id="layaways-container" class="col-md-8 hidden" style="padding: 0; margin: 0; border-radius: 0 5px 5px 0; background-color: @customGray">
            @{
                var layawayItemCount = 0;
                var layawayCount = Model.Layaways.Count;
                foreach (var layaway in Model.Layaways)
                {
                    layawayItemCount += layaway.LayawayItems.Sum(l => l.Quantity);
                }
                var layawayFullName = Model.FirstName + ' ' + Model.LastName;
                var layawayCompanyName = Model.CompanyName == "" ? "" : " (" + Model.CompanyName + ")";
                var layawayCombinedName = layawayFullName + layawayCompanyName;
            }
            <span id="curr-layaway-id" style="display: none"></span>
            <div style="margin: 0px 0px 5px 25px">
                <div style="margin: 20px 0 10px 0">
                    <h4 style="display: inline">Layaways</h4>
                    <button onclick="addLayaway(event)"
                            id="add-layaway-btn"
                            type="button"
                            style="margin: -3px 30px 0 0; padding: 1px 10px !important"
                            class="btn btn-default btn-xm hidden btn-danger-text pull-right">
                        Add Layaway
                    </button>
                </div>
                <div>
                    <strong>
                        <span class="text-primary" style="float: right; margin:3px 30px 3px 3px">@layawayCombinedName</span>
                        <span style="float: right; margin:3px 10px 3px 3px">Customer: </span>
                    </strong>
                    <span style="margin: 3px 13px 3px 3px">Layaways: @layawayCount</span>Total Items:
                    <span name="item-count" style="margin:3px">@layawayItemCount</span>
                </div>
            </div>
            @Html.Partial("Layaways", Model.Layaways)
        </div>

        <div id="invoices-container" class="col-md-8 hidden" style="padding: 0; margin: 0; border-radius: 0 5px 5px 0; background-color: @customGray">
            @{
                var invoiceItemCount = 0;
                var invoiceCount = Model.Invoices.Count;
                foreach (var invoice in Model.Invoices)
                {
                    invoiceItemCount += invoice.InvoiceItems.Sum(i => i.Quantity);
                }
                var invoiceFullName = Model.FirstName + ' ' + Model.LastName;
                var invoiceCompanyName = Model.CompanyName == "" ? "" : " (" + Model.CompanyName + ")";
                var invoicecombinedName = invoiceFullName + invoiceCompanyName;
            }
            <span id="curr-invoice-id" style="display: none"></span>
            <div style="margin: 0px 0px 5px 25px">
                <div style="margin: 20px 0 10px 0">
                    <h4 style="display: inline">Invoices</h4>
                    <button onclick="addInvoice(event)"
                            id="add-invoice-btn"
                            type="button"
                            style="margin: -3px 30px 0 0; padding: 1px 10px !important"
                            class="btn btn-default btn-xm btn-danger-text hidden pull-right">
                        Add Invoice
                    </button>
                </div>
                <div>
                    <strong>
                        <span class="text-primary" style="float: right; margin:3px 30px 3px 3px">@invoicecombinedName</span>
                        <span style="float: right; margin:3px 10px 3px 3px">Customer: </span>
                    </strong>
                    <span style="margin: 3px 13px 3px 3px">Invoices: @Model.Invoices.Count</span>Total Items:
                    <span name="item-count" style="margin:3px">@invoiceItemCount</span>
                </div>
            </div>
            @Html.Partial("Invoices", Model.Invoices)
        </div>

        <div id="onlineorders-container" class="col-md-8 hidden" style="padding: 0; margin: 0; border-radius: 0 5px 5px 0; background-color: @customGray">
            @{
                var onlineorderItemCount = 0;
                var onlineorderCount = Model.OnlineOrders.Count;
                foreach (var onlineorder in Model.OnlineOrders)
                {
                    onlineorderItemCount += onlineorder.OnlineOrderItems.Sum(i => i.Quantity);
                }
                var onlineorderFullName = Model.FirstName + ' ' + Model.LastName;
                var onlineorderCompanyName = Model.CompanyName == "" ? "" : " (" + Model.CompanyName + ")";
                var onlineordercombinedName = onlineorderFullName + onlineorderCompanyName;
            }
            <span id="curr-onlineorder-id" style="display: none"></span>
            <div style="margin: 0px 0px 5px 25px">
                <div style="margin: 20px 0 10px 0">
                    <h4 style="display: inline">Online Orders</h4>
                    <button onclick="addOnlineOrder(event)"
                            id="add-onlineorder-btn"
                            type="button"
                            style="margin: -3px 30px 0 0; padding: 2px 10px !important"
                            class="btn btn-default btn-xs hidden btn-danger-text pull-right">
                        Add Order
                    </button>
                </div>
                <div>
                    <strong>
                        <span class="text-primary" style="float: right; margin:3px 30px 3px 3px">@onlineordercombinedName</span>
                        <span style="float: right; margin:3px 10px 3px 3px">Customer: </span>
                    </strong>
                    <span style="margin: 3px 13px 3px 3px">Orders: @Model.OnlineOrders.Count</span>Total Items:
                    <span name="item-count" style="margin:3px">@onlineorderItemCount</span>
                </div>
            </div>
            @Html.Partial("OnlineOrders", Model.OnlineOrders)
        </div>
    </div>
}


@section Scripts {
    <script type="text/javascript">
        /////////////////////////////////////////////////////////////////////////////////////////////

        document.body.onpageshow = function (event) {
            restorePgState();
            if (getActiveSubForm() === "alt-subform-container") {
                showCustomerNotes();
            }
            savePgState();
        };

        /////////////////////////////////////////////////////////////////////////////////////////////

        setInvoicesDatePickers(event);
        setLayawaysDatePickers(event);
        setCustomerTotals(event);

        document.getElementById("file").onchange = function () {
            //let message = ("New file selected: " + this.value).replace("C:\\fakepath\\", "");
            //document.getElementById('image-message').innerText = message;
        };

        /////////////////////////////////////////////////////////////////////////////////////////////

        document.onkeypress = function (event) {
            if (event.keyCode === 13) {
                var textInputs = document.getElementById("customer-info").querySelectorAll("input[type='text']");
                textInputs.forEach(input => {
                    if (input === event.target) {
                        event.preventDefault();
                    }
                });
            }
        };

        /////////////////////////////////////////////////////////////////////////////////////////////

        function focusMatchingInput(input_id) {
            var parentElement1 = event.target.parentNode;
            var parentElement2 = parentElement1.parentNode;
            if (parentElement2.querySelector("#" + input_id).type === "date")
                parentElement2.querySelector("#" + input_id).focus();
            else
                parentElement2.querySelector("#" + input_id).select();
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function savePgState(forceState = null) {
            //
            state = forceState;
            if (!state) {
                state = {
                    CustomerId: getCurrCustomerId(),
                    CurrSubForm: getActiveSubForm(),
                    CurrLayawayPgIndex: getCurrLayawayPgIndex(),
                    CurrInvoicePgIndex: getCurrInvoicePgIndex(),
                    CurrPOSSalePgIndex: getCurrPOSSalePgIndex(),
                    CurrOnlineOrderPgIndex: getCurrOnlineOrderPgIndex(),
                    CustomerEditBorder: getCustomerEditBorderState()
                };
            }
            var btnsVisibility = getCustomerEditBtnsVisibility();
            Object.keys(btnsVisibility).forEach(key => {
                state[key] = btnsVisibility[key];
            });
            setCookie("PageState", JSON.stringify(state), 1);
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function getCustomerEditBtnsVisibility() {
            var result = {};

            var btnElementIdList = [
                ["save-customer-btn", "SaveCustomerButton"],
                ["add-customernote-btn", "AddCustomerNoteButton"],
                ["show-customernotes-btn", "ShowCustomerNotesButton"],
                ["add-attachment-btn", "AddAttachmentButton"],
                ["show-attachments-btn", "ShowAttachmentsButton"],
                ["add-invoice-btn", "AddInvoiceButton"],
                ["show-invoices-btn", "ShowInvoicesButton"],
                ["add-layaway-btn", "AddLayawayButton"],
                ["show-layaways-btn", "ShowLayawaysButton"],
                ["add-possale-btn", "AddPOSSaleButton"],
                ["show-possales-btn", "ShowPOSSalesButton"],
                ["add-onlineorder-btn", "AddOnlineOrderButton"],
                ["show-onlineorders-btn", "ShowOnlineOrdersButton"]
            ];

            btnElementIdList.forEach(elementDataPair => {
                //
                var btnElementId = elementDataPair[0];
                var statePropertyName = elementDataPair[1];
                //
                var btn = document.getElementById(btnElementId);
                if (btn.classList.contains("hidden")) {
                    result[statePropertyName] = false;
                }
                else {
                    result[statePropertyName] = true;
                }
            });
            return result;
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function restorePgState() {
            //
            var cookie = getCookie("PageState");
            if (!cookie) {
                return;
            }
            var state = JSON.parse(cookie);

            if (state.CustomerId !== getCurrCustomerId()) {
                return;
            }

            // current ChargeItem Types
            var ItemTypes = ["POSSale", "Invoice", "Layaway", "OnlineOrder"];

            // gen subform names from Item Types
            var subforms = [];
            ItemTypes.forEach(itemType => { subforms.push(itemType.toLowerCase() + "s"); });

            // restore Subforms View state
            subforms.forEach((subform, index) => {
                //var currSubformPgIndex = state.CurrLayawayPgIndex;
                var currSubformPgIndex = state["Curr" + ItemTypes[index] + "PgIndex"];
                if (currSubformPgIndex) {
                    let table = document.getElementById(subform + "-table");
                    let rows = table.rows;
                    for (let i = 0; i < rows.length; i++) {
                        let row = rows[i];
                        let pgIndex = row.querySelector("span[name='" + subform + "-table-row-number']").innerHTML;
                        pgIndex = parseInt(pgIndex);
                        if (pgIndex === currSubformPgIndex) {
                            row.classList.remove("hidden");
                        }
                        else {
                            row.classList.add("hidden");
                        }
                    }
                }
            });

            // restore all forms' View state
            var subformElementIds = [
                "alt-subform-container",
                "attachments-container",
                "customernotes-container",
                "layaways-container",
                "invoices-container",
                "possales-container",
                "onlineorders-container"
            ];
            subformElementIds.forEach(elementId => {
                var subform = document.getElementById(elementId);
                if (elementId === state.CurrSubForm) {
                    // reference button indicating which subform to activate (make visible)
                    var showSubformBtn_id = "show-" + elementId.replace("-container", "") + "-btn";
                    document.getElementById(showSubformBtn_id).click();
                }
                else {
                    subform.classList.add("hidden");
                }
            });

            // restore Customer Buttons view state
            var btnsState = {
                "save-customer-btn": state.SaveCustomerButton,
                "add-customernote-btn": state.AddCustomerNoteButton,
                "show-customernotes-btn": state.ShowCustomerNotesButton,
                "add-attachment-btn": state.AddAttachmentButton,
                "show-attachments-btn": state.ShowAttachmentsButton,
                "add-invoice-btn": state.AddInvoiceButton,
                "show-invoices-btn": state.ShowInvoicesButton,
                "add-layaway-btn": state.AddLayawayButton,
                "show-layaways-btn": state.ShowLayawaysButton,
                "add-possale-btn": state.AddPOSSaleButton,
                "show-possales-btn": state.ShowPOSSalesButton,
                "add-onlineorder-btn": state.AddOnlineOrderButton,
                "show-onlineorders-btn": state.ShowOnlineOrdersButton
            }
            Object.keys(btnsState).forEach(key => {
                var btn = document.getElementById(key);
                var btnState = btnsState[key];
                if (btnState)
                    btn.classList.remove("hidden");
                else
                    btn.classList.add("hidden");
            });

            // restore Customer fields border
            document.getElementById("customer-form").className = state.CustomerEditBorder;

            expireCookie("PageState");
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function getCurrCustomerId() {
            return document.getElementById("Id").value;
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function getCustomerEditBorderState() {
            return document.getElementById("customer-form").className;
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function getActiveSubForm() {
            var result = "";
            var subformElementIds = [
                "alt-subform-container",
                "attachments-container",
                "customernotes-container",
                "layaways-container",
                "invoices-container",
                "possales-container",
                "onlineorders-container"
            ];
            subformElementIds.forEach(function (elementId, index) {
                var subform = document.getElementById(elementId);
                if (!subform.classList.contains("hidden")) {
                    result = elementId;
                }
            });
            return result;
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function getCurrLayawayPgIndex() {
            return getCurrSubformPgIndex("Layaway");
        }
        /////////////////////////////////////////////////////////////////////////////////////////////

        function getCurrInvoicePgIndex() {
            return getCurrSubformPgIndex("Invoice");
        }
        /////////////////////////////////////////////////////////////////////////////////////////////

        function getCurrPOSSalePgIndex() {
            return getCurrSubformPgIndex("POSSale");
        }
        /////////////////////////////////////////////////////////////////////////////////////////////

        function getCurrOnlineOrderPgIndex() {
            return getCurrSubformPgIndex("OnlineOrder");
        }
        /////////////////////////////////////////////////////////////////////////////////////////////

        function getCurrSubformPgIndex(recordType) {
            recordType = recordType.toLowerCase();
            var table = document.getElementById(recordType + "s-table");
            var tableRows = table.rows;
            for (let i = 0; i < tableRows.length; i++) {
                var row = tableRows[i];
                if (!row.classList.contains("hidden")) {
                    var pgIndex = row.querySelector("span[name='" + recordType + "s-table-row-number']").innerHTML;
                    if (pgIndex) {
                        pgIndex = parseInt(pgIndex);
                        return pgIndex;
                    }
                }
            }
            return null;
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function hideAllSubForms() {
            // hide all Subforms
            document.getElementById("alt-subform-container").classList.add("hidden");
            document.getElementById("attachments-container").classList.add("hidden");
            document.getElementById("customernotes-container").classList.add("hidden");
            document.getElementById("possales-container").classList.add("hidden");
            document.getElementById("layaways-container").classList.add("hidden");
            document.getElementById("invoices-container").classList.add("hidden");
            document.getElementById("onlineorders-container").classList.add("hidden");
            // also hide all the Add buttons
            document.getElementById("add-attachment-btn").classList.add("hidden");
            document.getElementById("add-customernote-btn").classList.add("hidden");
            document.getElementById("add-possale-btn").classList.add("hidden");
            document.getElementById("add-invoice-btn").classList.add("hidden");
            document.getElementById("add-layaway-btn").classList.add("hidden");
            document.getElementById("add-onlineorder-btn").classList.add("hidden");
            // also show all the Show buttons
            document.getElementById("show-attachments-btn").classList.remove("hidden");
            document.getElementById("show-customernotes-btn").classList.remove("hidden");
            document.getElementById("show-possales-btn").classList.remove("hidden");
            document.getElementById("show-invoices-btn").classList.remove("hidden");
            document.getElementById("show-layaways-btn").classList.remove("hidden");
            document.getElementById("show-onlineorders-btn").classList.remove("hidden");
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function addCustomerSectionBorder(subform) {
            //select Customer-Edit section
            var customerSection = document.getElementById("customer-form");

            // clear all borders from it
            [
                "border-golden",
                "border-copper",
                "border-warning",
                "border-green",
                "border-blue",
                "border-dark-blue",
                "border-sky-blue"
            ].forEach(item => { customerSection.classList.remove(item); });
            // now select specified border
            if (subform.toLowerCase().indexOf("customernote") > -1) {
                customerSection.classList.add("border");
                customerSection.classList.add("border-sky-blue");
            }
            else if (subform.toLowerCase().indexOf("attachment") > -1) {
                customerSection.classList.add("border");
                customerSection.classList.add("border-dark-blue");
            }
            else if (subform.toLowerCase().indexOf("invoice") > -1) {
                customerSection.classList.add("border");
                customerSection.classList.add("border-golden");
            }
            else if (subform.toLowerCase().indexOf("layaway") > -1) {
                customerSection.classList.add("border");
                customerSection.classList.add("border-copper");
            }
            else if (subform.toLowerCase().indexOf("possale") > -1) {
                customerSection.classList.add("border");
                customerSection.classList.add("border-green");
            }
            else if (subform.toLowerCase().indexOf("onlineorder") > -1) {
                customerSection.classList.add("border");
                customerSection.classList.add("border-blue");
            }
            else {
                customerSection.classList.add("border");
            }
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function colorUpperTabButton(clickedBtnId) {
            var btnBgColorClasses = [
                ["show-customernotes-btn", "bg-sky-blue"],
                ["show-attachments-btn", "bg-dark-blue"],
                ["show-possales-btn", "bg-green"],
                ["show-invoices-btn", "bg-golden"],
                ["show-layaways-btn", "bg-copper"],
                ["show-onlineorders-btn", "bg-blue"]
            ];

            btnBgColorClasses.forEach(btn => {
                btnId = btn[0];
                btnClass = btn[1];
                if (btnId === clickedBtnId) {
                    document.getElementById(btnId).classList.add(btnClass);
                    document.activeElement.blur();
                }
                else {
                    document.getElementById(btnId).classList.remove(btnClass);
                }                
            });
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function hideProductList() {
            document.getElementById("product-lookup").classList.add("hidden");  // hide product list
            document.getElementById("customer-info").style.opacity = 1;         // reveal customer info
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function showSubform(recordType) {
            var RecordType = recordType;            
            recordType = recordType.toLowerCase();
            var containerName = recordType + "s-container";
            var activeForm = getActiveSubForm();
            if (activeForm === containerName) {
                return;
            }
            hideProductList();
            hideAllSubForms();
            document.getElementById(containerName).classList.remove("hidden");
            document.getElementById("add-" + recordType + "-btn").classList.remove("hidden");
            addCustomerSectionBorder(RecordType);
            colorUpperTabButton("show-" + recordType + "s-btn");
            savePgState();
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function showAttachments(event) {
            showSubform("Attachment");
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function showCustomerNotes(event) {
            showSubform("CustomerNote");
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function showPOSSales(event) {
            showSubform("POSSale");
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function showInvoices(event) {
            showSubform("Invoice");
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function showLayaways(event) {
            showSubform("Layaway");
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function showOnlineOrders(event) {
            showSubform("OnlineOrder");
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function saveCustomer(event) {
            document.getElementById('customer-edit-form').submit();
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function setInvoicesDatePickers(event) {
            var container = document.getElementById("invoices-container");
            var table = container.querySelector("table");
            var rows = table.rows;
            for (let i = 0; i < rows.length; i++) {
                var row = rows[i];
                var invoiceDateEl = row.querySelector("[id='invoice_InvoiceDate']");
                var invoiceDate = invoiceDateEl.getAttribute("value");
                var date1 = new Date(invoiceDate);
                var newInvoiceDate = date1.getFullYear() + "-" + (date1.getMonth() + 1).toString().padStart(2, '0') + "-" + date1.getDate().toString().padStart(2, '0');
                invoiceDateEl.value = newInvoiceDate;
            }
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function setLayawaysDatePickers(event) {
            var container = document.getElementById("layaways-container");
            var table = container.querySelector("table");
            var rows = table.rows;
            for (let i = 0; i < rows.length; i++) {
                var row = rows[i];
                var agreementDateEl = row.querySelector("[id='layaway_AgreementDate']");
                var agreementDate = agreementDateEl.getAttribute("value");
                var date1 = new Date(agreementDate);
                var newAgreementDate = date1.getFullYear() + "-" + (date1.getMonth() + 1).toString().padStart(2, '0') + "-" + date1.getDate().toString().padStart(2, '0');
                agreementDateEl.value = newAgreementDate;

                var dueDateEl = row.querySelector("[id='layaway_DueDate']");
                var dueDate = dueDateEl.getAttribute("value");
                var date2 = new Date(dueDate);
                var newDueDate = date2.getFullYear() + "-" + (date2.getMonth() + 1).toString().padStart(2, '0') + "-" + date2.getDate().toString().padStart(2, '0');
                dueDateEl.value = newDueDate;
            }
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function setCustomerTotals(event) {
            var tableList = ["invoices-table", "layaways-table", "possales-table", "onlineorders-table"];
            tableList.forEach(tableName => {
                var table = document.getElementById(tableName);
                var rows = table.rows;
                let row = rows[rows.length - 1];
                var balance = row.querySelector("[name='customer-balance']").innerHTML;
                for (let i = 0; i < rows.length; i++) {
                    let row = rows[i];
                    row.querySelector("[name='all-pending-transaction-charges']").innerHTML = balance;
                }
            });
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function addCommasToNumber(number) {
            var result = "";
            if (isNaN(number)) {
                return result;
            }
            var n = number.toString().replace(/,/g, "");
            var indexOfDot = n.indexOf(".")
            result = n.substring(indexOfDot);   // add decimal part to result
            n = n.substring(0, indexOfDot);     // truncate decimal part from temp variable, n
            var arr = n.split("");
            for (let i = arr.length - 1; i >= 0; i -= 3) {
                result = arr[i] + (result && i < arr.length - 1 ? "," : "") + result;
                if (i - 1 >= 0) {
                    result = arr[i - 1] + result
                    if (i - 2 >= 0) {
                        result = arr[i - 2] + result;
                    }
                }
            }
            return result.replace("-,", "-");;
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function updateCustomerTotalsWithPayment(tableRow) {
            //
            var oldAmount = parseFloat(tableRow.querySelector("[name='AmountOldValue']").value);
            var newAmount = parseFloat(tableRow.querySelector("[name='Amount']").value);
            var paymentChange = newAmount - oldAmount;
            //
            var parentTableRow = getParent(tableRow, "tr");
            var grandParentTable = getParent(parentTableRow, "table");
            //
            var table_id = grandParentTable.id;
            var rowIndex = parseInt(parentTableRow.querySelector("[name='" + table_id + "-row-number']").innerText);
            //
            var updatePatmentTotal = true;
            updateCustomerTotals(table_id, paymentChange, rowIndex, updatePatmentTotal);

            // reset old values for Payment record
            var r = tableRow;
            r.querySelector("[name='PaymentDateOldValue']").value = r.querySelector("[name='PaymentDate']").value;
            r.querySelector("[name='AmountOldValue']").value = r.querySelector("[name='Amount']").value;
            r.querySelector("[name='PaymentModeOldValue']").value = r.querySelector("[name='PaymentMode']").value;
            r.querySelector("[name='CheckNoOldValue']").value = r.querySelector("[name='CheckNo']").value;
            r.querySelector("[name='CheckImageOldValue']").value = r.querySelector("[name='CheckImage']").value;
            r.querySelector("[name='CheckWriterOldValue']").value = r.querySelector("[name='CheckWriter']").value;
            r.querySelector("[name='CreditCardHolderOldValue']").value = r.querySelector("[name='CreditCardHolder']").value;
            r.querySelector("[name='CreditCardNoOldValue']").value = r.querySelector("[name='CreditCardNo']").value;
            r.querySelector("[name='CreditCardNameOldValue']").value = r.querySelector("[name='CreditCardName']").value;
            r.querySelector("[name='CreditCardExpMonthOldValue']").value = r.querySelector("[name='CreditCardExpMonth']").value;
            r.querySelector("[name='CreditCardExpYearOldValue']").value = r.querySelector("[name='CreditCardExpYear']").value;
            r.querySelector("[name='CreditCardExpCVVOldValue']").value = r.querySelector("[name='CreditCardExpCVV']").value;
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function updateCustomerTotals(table_id, amountAdded = null, rowIndex = null, updatePaymentTotal = false) {
            if (!amountAdded || !rowIndex) {
                return;
            }
            var paymentAmountChange = 0;
            if (updatePaymentTotal) {
                paymentAmountChange = amountAdded;
                amountAdded = amountAdded * -1;
            }
            amountAdded = parseFloat(amountAdded).toFixed(2);
            var table = document.getElementById(table_id);
            var rows = table.rows;
            for (let i = 0; i < rows.length; i++) {
                var row = rows[i];
                if (i === (rowIndex - 1)) {
                    if (updatePaymentTotal) {
                        // update parent table Payments
                        var oldCurrentPayments = (row.querySelector("span[name='current-payments']").innerHTML).replace("$ ", "");          // remove leading '$ ' from UI data
                        oldCurrentPayments = parseFloat(oldCurrentPayments);
                        var newCurrentPayments = parseFloat(oldCurrentPayments) + parseFloat(paymentAmountChange);
                        row.querySelector("span[name='current-payments']").innerHTML = parseFloat(newCurrentPayments).toFixed(2);
                    }
                    else {
                        // update parent table Charges
                        var oldTransactionCharges = (row.querySelector("span[name='transaction-charges']").innerHTML).replace("$ ", "");          // remove leading '$ ' from UI data
                        oldTransactionCharges = parseFloat(oldTransactionCharges);
                        var newTransactionCharges = parseFloat(oldTransactionCharges) + parseFloat(amountAdded);
                        row.querySelector("span[name='transaction-charges']").innerHTML = parseFloat(newTransactionCharges).toFixed(2);
                    }
                    // update parent table Balance
                    var oldBalance = (row.querySelector("span[name='current-balance']").innerHTML).replace("$ ", "");          // remove leading '$ ' from UI data
                    oldBalance = parseFloat(oldBalance);
                    var newBalance = parseFloat(oldBalance) + parseFloat(amountAdded);
                    row.querySelector("span[name='current-balance']").innerHTML = parseFloat(newBalance).toFixed(2);
                }
                var oldAllTransactionCharges = (row.querySelector("[name='all-pending-transaction-charges']").innerHTML).replace("$ ", "");   // remove leading '$ ' from UI data
                oldAllTransactionCharges = oldAllTransactionCharges.replace(/,/g, "");
                var newAllTransactionCharges = parseFloat(oldAllTransactionCharges) + parseFloat(amountAdded);
                row.querySelector("[name='all-pending-transaction-charges']").innerHTML = "$ " + addCommasToNumber(parseFloat(newAllTransactionCharges).toFixed(2));
            }
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function hideNewCustomerNote() {
            document.getElementById("new-note-container").classList.add("hidden");
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function addAttachment(event) {
            //document.getElementById("new-note-container").classList.remove("hidden");
            //document.getElementById("new-note-body").focus();
            alert("test 1");
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function addCustomerNote(event) {
            document.getElementById("new-note-container").classList.remove("hidden");
            document.getElementById("new-note-body").focus();
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function saveNewCustomerNote(event) {
            var customerId = document.getElementById("new-customernote-customer-id").innerText;
            var currUser = document.getElementById("UserName").innerText;
            var category = document.getElementById("new-customernote-category").value;
            var noteBody = document.getElementById("new-note-body").value;
            var colorBlueText = "#1a53ff";

            var customerNote = {
                CustomerId: customerId,
                UserName: currUser,
                Category: category,
                NoteBody: noteBody
            }

            if (!customerNote.NoteBody) {
                return;
            }

            var noteBody = noteBody.replace(/\n/g, "<br>");
            var d = new Date();
            var hours = d.getHours();
            var ampm = (hours < 12) ? "AM" : "PM";
            hours = ((hours > 12) ? hours - 12 : hours).toString().padStart(2, "0");
            var time = hours + ":";
            time += d.getMinutes().toString().padStart(2, "0") + ":";
            time += d.getSeconds().toString().padStart(2, "0") + " ";
            time += ampm;
            var createdAt = (d.getMonth() + 1).toString().padStart(2, "0") + "/" + d.getDate().toString().padStart(2, "0") + "/" + d.getFullYear() + " " + time;

            var notesTable = document.getElementById("customernotes-table");
            var rowCount = notesTable.rows.length;

            var newTD = `
                            <td style="background-color: #fcfdfd">
                                <span name="customernote-id" class="hidden"></span>
                                <span name="row-index" style="margin-right: 5px; font-weight: 600">${(rowCount + 1)}</span>
                                <span>${createdAt}</span>
                                <span class="hidden">${customerId}</span>
                                <span id="curr-user">${currUser}</span>
                                <div>Category: <span>${category}</span></div>
                                <div id="new-customernote-note-body" style="color: ${colorBlueText}; margin-right: 60px">${noteBody}</div>
                                <button onclick="deleteCustomerNote(event)"
                                        type="button"
                                        class="btn btn-default btn-xs pull-right"
                                        style="margin: -30px 0 0 0; display: block">
                                    <span class="text-danger">Delete</span>
                                </button>
                            </td>
                        `
            var xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function () {
                if (this.readyState === 4 && this.status === 200) {
                    var responseText = this.responseText;
                    var responseObject = JSON.parse(responseText);
                    if (responseObject.Successful === true) {
                        var newNoteId = responseObject.CustomerNoteId;
                        var tableBody = notesTable.querySelector("tbody");
                        if (!tableBody) {
                            tableBody = document.createElement("tbody");
                            notesTable.appendChild(tableBody);
                        }
                        var newRow = tableBody.insertRow()
                        newRow.innerHTML = newTD;
                        newRow.querySelector("[name='customernote-id']").innerText = newNoteId;
                        document.getElementById("hide-new-customernote-btn").click();
                        newRow.scrollIntoView();
                        document.getElementById("new-note-body").value = "";
                    }
                    else if (responseObject.Message) {
                        ShowMessage(responseObject.Message, "<span class='text-warning'>Server Error</span>");
                    }
                }
            };
            xhttp.open("GET", "/CustomerManager/AddCustomerNote/?data=" + JSON.stringify(customerNote), true);
            xhttp.send();
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function deleteCustomerNote(event) {
            var notesTable = getParent(event.target, "table");
            var tableRow = getParent(event.target, "tr");
            var currRowIndex = tableRow.querySelector("[name='row-index']").innerText;
            var noteId = tableRow.querySelector("[name='customernote-id']").innerText;
            var mesgHtml = "Click Delete to remove note permanently or Cancel to abort.";
            var titleHtml = "Warning - Please Confirm Note Deletion";
            ShowMessage(mesgHtml, titleHtml, "delete, cancel").then(
                function (response) {
                    if (response === "Delete") {
                        var xhttp = new XMLHttpRequest();
                        xhttp.onreadystatechange = function () {
                            if (this.readyState === 4 && this.status === 200) {
                                var responseText = this.responseText;
                                var responseObject = JSON.parse(responseText);
                                if (responseObject.Successful === true) {
                                    tableRow.parentNode.removeChild(tableRow);
                                    for (let i = currRowIndex - 1; i < notesTable.rows.length; i++) {
                                        var row = notesTable.rows[i];
                                        var rowIndexSpan = row.querySelector("[name='row-index']");
                                        rowIndexSpan.innerText = parseInt(rowIndexSpan.innerText) - 1;
                                    }
                                }
                                else if (responseObject.Message) {
                                    ShowMessage(responseObject.Message, "<span class='text-warning'>Server Error</span>");
                                }
                            }
                        };
                        xhttp.open("GET", "/CustomerManager/DeleteCustomerNote/?Id=" + noteId, true);
                        xhttp.send();
                    }
                },
                function (error) {
                    alert("Something went wrong!");
                }
            );
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function addLayaway(event) {
            addCustomerSubformRecord("Layaway");
        }
        /////////////////////////////////////////////////////////////////////////////////////////////

        function addInvoice(event) {
            addCustomerSubformRecord("Invoice");
        }
        /////////////////////////////////////////////////////////////////////////////////////////////

        function addPOSSale(event) {
            addCustomerSubformRecord("POSSale");
        }
        /////////////////////////////////////////////////////////////////////////////////////////////

        function addOnlineOrder(event) {
            addCustomerSubformRecord("OnlineOrder");
        }
        /////////////////////////////////////////////////////////////////////////////////////////////

        function addCustomerSubformRecord(recordType) {
            // save page state
            var RecordType = recordType;
            recordType = recordType.toLowerCase();

            var state = {
                CustomerId: getCurrCustomerId(),
                CurrSubForm: recordType + "s-container",
                CurrLayawayPgIndex: getCurrLayawayPgIndex(),
                CurrInvoicePgIndex: getCurrInvoicePgIndex(),
                CurrPOSSalePgIndex: getCurrPOSSalePgIndex(),
                CurrOnlineOrderPgIndex: getCurrOnlineOrderPgIndex(),
                CustomerEditBorder: getCustomerEditBorderState()
            }
            switch (recordType) {
                case "layaway":
                    CurrLayawayPgIndex = 1;
                    break;
                case "invoice":
                    CurrInvoicePgIndex = 1;
                    break;
                case "possale":
                    CurrPOSSalePgIndex = 1;
                    break;
                case "onlineorder":
                    CurrOnlineOrderPgIndex = 1;
                    break;
                default:
                    return;
            }
            savePgState(state);

            var customerId = document.getElementById("Id").value;

            //upload data
            var xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function () {
                if (this.readyState === 4 && this.status === 200) {
                    var responseText = this.responseText;
                    var responseObject = JSON.parse(responseText);
                    if (responseObject.Successful === true) {
                        location.reload();
                    }
                    else if (responseObject.Message) {
                        ShowMessage(responseObject.Message, "<span class='text-warning'>Server Error</span>");
                    }
                }
            };
            xhttp.open("GET", "/CustomerManager/Add" + RecordType + "/?customerId=" + customerId, true);
            xhttp.send();
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function deleteLayaway(event) {
            deleteSubformRecord(event, "Layaway");
        }
        /////////////////////////////////////////////////////////////////////////////////////////////

        function deleteInvoice(event) {
            deleteSubformRecord(event, "Invoice");
        }
        /////////////////////////////////////////////////////////////////////////////////////////////

        function deletePOSSale(event) {
            deleteSubformRecord(event, "POSSale");
        }
        /////////////////////////////////////////////////////////////////////////////////////////////

        function deleteOnlineOrder(event) {
            deleteSubformRecord(event, "OnlineOrder");
        }
        /////////////////////////////////////////////////////////////////////////////////////////////

        function deleteSubformRecord(event, recordType) {
            var RecordType = recordType;
            recordType = recordType.toLowerCase();

            var currPg = getCurrSubformPgIndex(RecordType);
            var newPg = 0;
            var table = document.getElementById(recordType + "s-table");
            if (table.rows.length > parseInt(currPg)) {
                newPg = parseInt(currPg);
            }
            else {
                newPg = parseInt(currPg) - 1;
            }
            var state = {
                CustomerId: getCurrCustomerId(),
                CurrSubForm: recordType + "s-container",
                CurrLayawayPgIndex: getCurrLayawayPgIndex(),
                CurrInvoicePgIndex: getCurrInvoicePgIndex(),
                CurrPOSSalePgIndex: getCurrPOSSalePgIndex(),
                CurrOnlineOrderPgIndex: getCurrOnlineOrderPgIndex(),
                CustomerEditBorder: getCustomerEditBorderState()
            }
            switch (recordType) {
                case "layaway":
                    state.CurrLayawayPgIndex = newPg;
                    break;
                case "invoice":
                    state.CurrInvoicePgIndex = newPg;
                    break;
                case "possale":
                    state.CurrPOSSalePgIndex = newPg;
                    break;
                case "onlineorder":
                    state.CurrOnlineOrderPgIndex = newPg;
                    break;
                default:
                    return;
            }
            // save page state
            savePgState(state);

            var recordId = (event.target.parentNode).parentNode.querySelector("[name='" + recordType + "-id']").innerHTML;

            //upload data
            var xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function () {
                if (this.readyState === 4 && this.status === 200) {
                    var responseText = this.responseText;
                    var responseObject = JSON.parse(responseText);
                    if (responseObject.Successful === true) {
                        location.reload();
                    }
                    else if (responseObject.Message) {
                        ShowMessage(responseObject.Message, "<span class='text-warning'>Server Error</span>");
                    }
                }
            };
            xhttp.open("GET", "/CustomerManager/Delete" + RecordType + "/?Id=" + recordId, true);
            xhttp.send();
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function saveSubformData(event, route, getData, finalProcess = null) {
            //
            var clickedElement = event.target;

            // get data form UI
            var tableRow = getParent(clickedElement, "tr");
            var data = getData(tableRow);

            if (data === null)
                return;

            // reference actual button clicked (not its child elements)
            var btn = clickedElement;
            if (btn.nodeName.toLowerCase() !== "button") {
                btn = getParent(clickedElement, "button");
            }

            // try to reference 'Scan Bardcode' button (will be undefined when saving a Payment)
            var scanUpcBtn = tableRow.querySelector("[name='scan-upc']");
            //upload data
            var xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function () {
                if (this.readyState === 4 && this.status === 200) {
                    var responseText = this.responseText;
                    var responseObject = JSON.parse(responseText);
                    if (responseObject.Successful === true) {
                        btn.classList.add("hidden");

                        if (scanUpcBtn) scanUpcBtn.classList.remove("hidden");

                        if (finalProcess) {
                            finalProcess(tableRow);
                        }

                        var routeMessages = {
                            "UpdateOnlineOrder": "Online Order Saved.",
                            "UpdatePOSSale": "POS Sale Updated.",
                            "UpdateInvoice": "Invoice Updated.",
                            "UpdateLayaway": "Layaway Updated.",
                            "AddPayment": "Payment Added.",
                            "UpdatePayment": "Payment Updated."
                        };
                        var message = routeMessages[route];

                        ShowMessage("<h4 class='text-primary' style='margin-left: 20px'>" + message + "</h4>");
                    }
                    else if (responseObject.Message) {
                        ShowMessage(responseObject.Message, "<span class='text-warning'>Server Error</span>");
                    }
                }
            };
            xhttp.open("GET", "/CustomerManager/" + route + "/?data=" + JSON.stringify(data), true);
            xhttp.send();
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function getUILayawayData(tableRow) {
            var layaway = {
                Id: tableRow.querySelector("[name='layaway-id']").innerHTML,
                CustomerId: tableRow.querySelector("[name='layaway-customer-id']").innerHTML,
                AgreementDate: tableRow.querySelector("[id='layaway_AgreementDate']").value,
                DueDate: tableRow.querySelector("[id='layaway_DueDate']").value,
                DownPayment: tableRow.querySelector("[id='layaway_DownPayment']").value,
                ServiceFee: tableRow.querySelector("[id='layaway_ServiceFee']").value,
                CancellationFee: tableRow.querySelector("[id='layaway_CancellationFee']").value,
                OrderStatus: tableRow.querySelector("[id='layaway_OrderStatus']").value
            };
            return layaway;
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function getUIOnlineOrderData(tableRow) {
            var onlineorder = {
                Id: tableRow.querySelector("[name='onlineorder-id']").innerHTML,
                CustomerId: tableRow.querySelector("[name='onlineorder-customer-id']").innerHTML,
                FirstName: tableRow.querySelector("[id='onlineorder_FirstName']").value,
                LastName: tableRow.querySelector("[id='onlineorder_LastName']").value,
                CompanyName: tableRow.querySelector("[id='onlineorder_CompanyName']").value,
                Street: tableRow.querySelector("[id='onlineorder_Street']").value,
                City: tableRow.querySelector("[id='onlineorder_City']").value,
                State: tableRow.querySelector("[id='onlineorder_State']").value,
                ZipCode: tableRow.querySelector("[id='onlineorder_ZipCode']").value,
                Email: tableRow.querySelector("[id='onlineorder_Email']").value,
                Phone: tableRow.querySelector("[id='onlineorder_Phone']").value,
                OrderStatus: tableRow.querySelector("[id='onlineorder_OrderStatus']").value
            };
            return onlineorder;
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function getUIInvoiceData(tableRow) {
            var invoice = {
                Id: tableRow.querySelector("[name='invoice-id']").innerHTML,
                InvoiceNumber: parseInt(tableRow.querySelector("[name='invoice-number']").innerText),
                CustomerId: tableRow.querySelector("[name='invoice-customer-id']").innerHTML,
                InvoiceDate: tableRow.querySelector("[id='invoice_InvoiceDate']").value,
                PayerFirstName: tableRow.querySelector("[id='invoice_PayerFirstName']").value,
                PayerLastName: tableRow.querySelector("[id='invoice_PayerLastName']").value,
                PayerCompany: tableRow.querySelector("[id='invoice_PayerCompany']").value,
                PayerStreet: tableRow.querySelector("[id='invoice_PayerStreet']").value,
                PayerCity: tableRow.querySelector("[id='invoice_PayerCity']").value,
                PayerState: tableRow.querySelector("[id='invoice_PayerState']").value,
                PayerZipCode: tableRow.querySelector("[id='invoice_PayerZipCode']").value,
                PayerEmail: tableRow.querySelector("[id='invoice_PayerEmail']").value,
                PayerPhone: tableRow.querySelector("[id='invoice_PayerPhone']").value,
                OrderStatus: tableRow.querySelector("[id='invoice_OrderStatus']").value
            };
            return invoice;
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function getUIPOSSaleData(tableRow) {
            var possale = {
                Id: tableRow.querySelector("[name='possale-id']").innerHTML,
                CustomerId: tableRow.querySelector("[name='possale-customer-id']").innerHTML,
                FirstName: tableRow.querySelector("[id='possale_FirstName']").value,
                LastName: tableRow.querySelector("[id='possale_LastName']").value,
                CompanyName: tableRow.querySelector("[id='possale_CompanyName']").value,
                Street: tableRow.querySelector("[id='possale_Street']").value,
                City: tableRow.querySelector("[id='possale_City']").value,
                State: tableRow.querySelector("[id='possale_State']").value,
                ZipCode: tableRow.querySelector("[id='possale_ZipCode']").value,
                Email: tableRow.querySelector("[id='possale_Email']").value,
                Phone: tableRow.querySelector("[id='possale_Phone']").value
            };
            return possale;
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function getUIPaymentData(tableRow) {
            var payment = {
                PaymentDate: tableRow.querySelector("[name='PaymentDate']").value,
                Amount: tableRow.querySelector("[name='Amount']").value,
                PaymentMode: tableRow.querySelector("[name='PaymentMode']").value,
                CheckNo: tableRow.querySelector("[name='CheckNo']").value,
                CheckWriter: tableRow.querySelector("[name='CheckWriter']").value,
                CheckImage: tableRow.querySelector("[name='CheckImage']").value,
                CreditCardHolder: tableRow.querySelector("[name='CreditCardHolder']").value,
                CreditCardExpMonth: tableRow.querySelector("[name='CreditCardExpMonth']").value,
                CreditCardExpYear: tableRow.querySelector("[name='CreditCardExpYear']").value,
                CreditCardCVV: tableRow.querySelector("[name='CreditCardCVV']").value,
                CreditCardNo: tableRow.querySelector("[name='CreditCardNo']").value,
                CreditCardName: tableRow.querySelector("[name='CreditCardName']").value,
                ReceivableSource: tableRow.querySelector("[name='ReceivableSource']").innerText,
                ReceivableSourceId: tableRow.querySelector("[name='ReceivableSourceId']").innerText,
                Id: tableRow.querySelector("[name='Id']").innerText
            };
            var message = validatePaymentInput(payment);
            if (!message) {
                if (payment.PaymentMode !== "credit card") {
                    payment.CreditCardExpMonth = 0;
                    payment.CreditCardExpYear = 0;
                }
                return payment;
            }
            else {
                ShowMessage("<div class='text-danger' style='margin-left: 50px'>" + message + "</div>", "<span class='text-warning'>Warning</span>");
                return null;
            }
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function deleteSubItemConfirmHTML(subform, productName, image) {
            let location = window.location;
            let protocol = location.protocol;
            let host = location.host;
            let baseUrl = protocol + "//" + host;
            let imageUrl = baseUrl + "//Content//ProductImages//" + image;

            switch (subform) {
                case "Invoice":
                case "Layaway":
                case "POSSale":
                case "OnlineOrder":
                    break;

                default:
                    return "";
            }
            let mesgHtml =
                "<div>" +
                "<div " +
                "style='display: inline-block; " +
                "width: 200px; " +
                "height: 250px; text-align: center; margin-top: auto; margin-bottom: auto'>" +
                "<img " +
                "class='img-thumbnail'" +
                "style='margin: auto; " +
                "height: 100%;" +
                "padding: 3px; " +
                "border-width: 1px;" +
                "border-radius: 50%;" +
                "border-color: #f1c2c1'" +
                "src='" + imageUrl + "'" +
                "alt='Image' " +
                "/>" +
                "</div>" +
                "<div style='display: inline-block; margin-left: 10px'>" +
                "<p>Click Delete to remove</p>" +
                "<p class='text-danger'><strong>" + productName + "</strong></p>" +
                "<P>from " + subform.replace("POSSale", "POS Sale") + ".</P>" +
                "</div>" +
                "</div>";

            return mesgHtml;
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function deleteLayawayItem(event, itemId, rowIndex, image, productName) {
            deleteChargeItem("Layaway", itemId, rowIndex, image, productName);
        }
        /////////////////////////////////////////////////////////////////////////////////////////////

        function deleteInvoiceItem(event, itemId, rowIndex, image, productName) {
            deleteChargeItem("Invoice", itemId, rowIndex, image, productName);
        }
        /////////////////////////////////////////////////////////////////////////////////////////////

        function deletePOSSaleItem(event, itemId, rowIndex, image, productName) {
            deleteChargeItem("POSSale", itemId, rowIndex, image, productName);
        }
        /////////////////////////////////////////////////////////////////////////////////////////////

        function deleteOnlineOrderItem(event, itemId, rowIndex, image, productName) {
            deleteChargeItem("OnlineOrder", itemId, rowIndex, image, productName);
        }
        /////////////////////////////////////////////////////////////////////////////////////////////

        function deleteChargeItem(itemType, itemId, rowIndex, image, productName) {
            // save page state
            savePgState();
            var ItemType = itemType;              // capitalized variable saves original form, e.g. POSSale, Invoice, Layaway, etc.
            itemType = itemType.toLowerCase();    // e.g. 'POSSale' => 'possale'; 'Invoice' => 'invoice'; etc.

            var containerName = itemType + "s-container";
            var itemQuantityElement = itemType + "item-quantity";
            var rowNumberElementName = itemType + "items-row-number";
            var rowCountElementName = itemType + "items-row-count";
            var tableName = itemType + "s-table";

            var getPrentTablePgIndex_Function = null;
            switch (ItemType) {
                case "POSSale":
                    getPrentTablePgIndex_Function = getCurrPOSSalePgIndex;
                    break;
                case "Invoice":
                    getPrentTablePgIndex_Function = getCurrInvoicePgIndex;
                    break;
                case "Layaway":
                    getPrentTablePgIndex_Function = getCurrLayawayPgIndex;
                    break;
                case "OnlineOrder":
                    getPrentTablePgIndex_Function = getCurrOnlineOrderPgIndex;
                    break;
                default:
                    return;
            }
            let mesgHtml = deleteSubItemConfirmHTML(ItemType, productName, image);
            let titleHtml = "<span class='text-danger'>Please confirm delete action...</span>";
            ShowMessage(mesgHtml, titleHtml, "delete, cancel").then(
                function (response) {
                    if (response === "Delete") {
                        var xhttp = new XMLHttpRequest();
                        xhttp.onreadystatechange = function () {
                            if (this.readyState === 4 && this.status === 200) {
                                var responseText = this.responseText;
                                var responseObject = JSON.parse(responseText);
                                if (responseObject.Successful === true) {
                                    //
                                    var container = document.getElementById(containerName);
                                    var parentRow = container.querySelector("[id='" + rowIndex + "']");

                                    var quantity = parentRow.querySelector("[name='" + itemQuantityElement + "']").innerHTML;
                                    var price = parentRow.querySelector("[id='item_Price']").value;
                                    var deletedItemIndex = parseInt(parentRow.querySelector("[name='" + rowNumberElementName + "']").innerHTML);
                                    var itemsTable = parentRow.parentNode;
                                    itemsTable.removeChild(parentRow);

                                    if (itemsTable.childElementCount === 0) {
                                        //ShowMessage("<p class='text-primary'>Item deleted.</p>").then(function (result) { location.reload(); }, function (error) { });
                                        location.reload();
                                    }
                                    else {
                                        var rows = itemsTable.rows;
                                        for (let i = 0; i < rows.length; i++) {
                                            var row = rows[i];

                                            var rowIndexSpan = row.querySelector("span[name='" + rowNumberElementName + "']");
                                            var itemIndex = parseInt(rowIndexSpan.innerHTML);
                                            if (deletedItemIndex < itemIndex) {
                                                rowIndexSpan.innerHTML = itemIndex - 1;
                                            }

                                            var rowCountSpan = row.querySelector("span[name='" + rowCountElementName + "']");
                                            var rowCount = parseInt(rowCountSpan.innerHTML);
                                            rowCountSpan.innerHTML = rowCount - 1;
                                        }
                                        updateCustomerTotals(tableName, (quantity * price) * -1, getPrentTablePgIndex_Function());
                                        updateTableHeaderItemCount(containerName, quantity * -1);
                                        //ShowMessage("<p class='text-primary'>Item deleted.</p>")
                                    }
                                }
                                else if (responseObject.Message) {
                                    ShowMessage(responseObject.Message);
                                }
                            }
                        };
                        xhttp.open("GET", "/CustomerManager/Delete" + ItemType + "Item/?id=" + itemId, true);
                        xhttp.send();
                    }
                },
                function (error) {
                    alert("Something went wrong!");
                }
            );
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function updateTableHeaderItemCount(subtableContainer, quantityAdded) {
            var currCountSpan = document.getElementById(subtableContainer).querySelector("[name='item-count']");
            var currCount = parseInt(currCountSpan.innerText);
            currCountSpan.innerText = currCount + quantityAdded;
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function popUpProductDetail(productId) {
            var xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function () {
                if (this.readyState === 4 && this.status === 200) {
                    var responseText = this.responseText;
                    var responseObject = JSON.parse(responseText);
                    if (responseObject.Id) {
                        //
                        showPopUp(responseObject);
                    }
                    else if (responseObject.Message) {
                        ShowMessage(responseObject.Message);
                    }
                }
            };
            xhttp.open("GET", "/CustomerManager/GetProduct/?id=" + productId, true);
            xhttp.send();

            function showPopUp(product) {
                var location = window.location;
                var protocol = location.protocol;
                var host = location.host;
                var baseUrl = protocol + "//" + host
                var imageUrl = baseUrl + "//Content//ProductImages//" + product.Image;
                var html = `
                        <div>
                             <div style="width: 35%; display: inline-block">
                                 <img class="img-rounded img-thumbnail"
                                      src="${imageUrl}"
                                      style="width: 27%; position: absolute; top: 7%; left: 5%"
                                      alt="Image" />
                             </div>
                             <div style="width: 50%; display: inline-block">
                                <h3>${product.Name}</h3>
                                <h4 class="text-primary">${product.Description}</h4>
                                <p style="margin-bottom: 2px"><strong>Vendor Price: </strong><span class="text-primary pull-right">${parseFloat(product.SupplierPrice).toFixed(2)}</span></p>
                                <p style="margin-bottom: 2px"><strong>Price: </strong><span class="text-primary pull-right">${product.Price}</span></p>
                                <p style="margin-bottom: 2px"><strong>Wholesale Price: </strong><span class="text-primary pull-right">${product.WholesalePrice}</span></p>
                                <p style="margin-bottom: 2px"><strong>Category: </strong><span class="text-primary pull-right">${product.Category}</span></span></span></p>
                                <p style="margin-bottom: 2px"><strong>Quantity In Stock: </strong><span class="text-primary pull-right">${product.Quantity}</span></p>
                                <p style="margin-bottom: 2px"><strong>Min: </strong><span class="text-primary pull-right">${product.QuantityMin}</p>
                                <p style="margin-bottom: 2px"><strong>On Layaway: </strong><span class="text-primary pull-right">${product.QuantityOnLayaway}</span></p>
                                <p style="margin-bottom: 2px"><strong>Is Service: </strong><span class="text-primary pull-right">${product.IsService}</span></p>
                                <p style="margin-bottom: 2px"><strong>UPC: </strong><span class="text-primary pull-right">${product.UPC}</p>
                                <p style="margin-bottom: 2px"><strong>Product Code: </strong><span class="text-primary pull-right">${product.ProductCode}</span></p>
                             </div>
                         </div>
                        `;

                ShowMessage(html, "<strong>Product Detail</strong>");
            }
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function openProductLookup(event, currTargetRecordId, targetform) {
            //
            var recordType = "";
            switch (targetform) {
                case "Invoices":
                    document.getElementById("curr-invoice-id").innerHtml = currTargetRecordId;
                    recordType = "Invoice"
                    break;
                case "Layaways":
                    document.getElementById("curr-layaway-id").innerHtml = currTargetRecordId;
                    recordType = "Layaway"
                    break;
                case "POSSales":
                    document.getElementById("curr-possale-id").innerHtml = currTargetRecordId;
                    recordType = "POSSale"
                    break;
                case "OnlineOrders":
                    document.getElementById("curr-onlineorder-id").innerHtml = currTargetRecordId;
                    recordType = "OnlineOrder"
                    break;
                default:
                    return;
            }
            var addBtns = document.querySelectorAll("[name='add-item-to-subform']");
            for (let i = 0; i < addBtns.length; i++) {
                addBtns[i].innerText = "Add To " + recordType.replace("POSSale", "Sale").replace("OnlineOrder", "Order");
            }
            document.getElementById("customer-info").style.opacity = 0;
            document.getElementById("product-lookup").classList.remove("hidden");
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function closeProductLookup(event) {
            document.getElementById("customer-info").style.opacity = 1;
            document.getElementById("product-lookup").classList.add("hidden");
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function copyProductData(event, productId, productTableRow = null, currTargetRecordId = "") {
            //
            event.preventDefault();
            var activeSubform = getActiveSubForm();

            switch (activeSubform) {
                case "invoices-container":
                    addProductToSubform(event, productId, productTableRow, currTargetRecordId, "Invoice");
                    break;
                case "layaways-container":
                    addProductToSubform(event, productId, productTableRow, currTargetRecordId, "Layaway");
                    break;
                case "possales-container":
                    addProductToSubform(event, productId, productTableRow, currTargetRecordId, "POSSale");
                    break;
                case "onlineorders-container":
                    addProductToSubform(event, productId, productTableRow, currTargetRecordId, "OnlineOrder");
                    break;
                default:
                    return;
            }
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function addProductToSubform(event, productId, productTableRow = null, currSubformRecordId = "", recordType) {
            var RecordType = recordType;
            recordType = recordType.toLowerCase();

            // save page state
            savePgState();

            currSubformRecordId = currSubformRecordId || document.getElementById("curr-" + recordType + "-id").innerHtml;
            var tableRow;
            if (!productTableRow) {
                tableRow = (event.target.parentNode).parentNode;
            }
            else {
                tableRow = productTableRow;
            }

            var productCopyFoundInItemsTable = false;
            var itemId = "";
            var subformTable = document.getElementById(recordType + "s-container").querySelector("table");

            // loop over Subform Records
            for (let subformTableRow of subformTable.rows) {
                var subformIdElement = subformTableRow.querySelector("[name='" + recordType + "-id']");
                var subformId = subformIdElement.innerHTML;
                if (subformId === currSubformRecordId) {
                    var itemsTable = subformTableRow.querySelector("table");
                    // loop over Items
                    for (let itemsRow of itemsTable.rows) {
                        var itemIdElement = itemsRow.querySelector("[name='" + recordType + "item-item-id']");
                        itemId = itemIdElement.innerHTML;

                        var itemProductIdElement = itemsRow.querySelector("[name='" + recordType + "item-product-id']");
                        var itemProductId = itemProductIdElement.innerHTML;

                        var itemQuantityElement = itemsRow.querySelector("[name='" + recordType + "item-quantity']");
                        var itemQuantity = itemQuantityElement.innerHTML;
                        ++itemQuantity;

                        if (productId === itemProductId) {
                            productCopyFoundInItemsTable = true;
                            break;
                        }
                    }
                    break;
                }
            }
            if (productCopyFoundInItemsTable) {
                //upload (update) data for Quantity field of Product record
                var xhttp = new XMLHttpRequest();
                xhttp.onreadystatechange = function () {
                    if (this.readyState === 4 && this.status === 200) {
                        var responseText = this.responseText;
                        var responseObject = JSON.parse(responseText);
                        if (responseObject.Successful === true) {
                            //ShowMessage("<p class='text-primary'>Item updated.</p>").then(function (result) { location.reload(); }, function (error) { });
                            location.reload();
                        }
                        else if (responseObject.Message) {
                            ShowMessage(responseObject.Message, "<span class='text-warning'>Server Error</span>");
                        }
                        else {
                            ShowMessage("Oops! Something went wrong.", "<span class='text-warning'>Server Error</span>");
                        }
                    }
                };
                xhttp.open("GET", "/CustomerManager/Update" + RecordType + "ItemQuantity/?Id=" + itemId + "&quantity=" + itemQuantity, true);
                xhttp.send();
            }
            else {
                // get product data from the Product Search List UI
                var item = {
                    Id: "",
                    ProductId: tableRow.querySelector("span[name='Id']").innerText,
                    ProductName: tableRow.querySelector("span[name='Name']").innerText,
                    ProductDescription: tableRow.querySelector("span[name='Description']").innerText,
                    Price: tableRow.querySelector("span[name='Price']").innerText,
                    Quantity: 1,
                    Image: tableRow.querySelector("span[name='Image']").innerText
                }
                item[RecordType + "Id"] = subformId;

                //upload (reate) data for entire Product record
                var xhttp = new XMLHttpRequest();
                xhttp.onreadystatechange = function () {
                    if (this.readyState === 4 && this.status === 200) {
                        var responseText = this.responseText;
                        var responseObject = JSON.parse(responseText);
                        if (responseObject.Successful === true) {
                            //ShowMessage("<p class='text-primary'>Item added.</p>").then(function (result) { location.reload(); }, function (error) { });
                            location.reload();
                        }
                        else if (responseObject.Message) {
                            ShowMessage(responseObject.Message);
                        }
                    }
                };
                xhttp.open("GET", "/CustomerManager/Add" + RecordType + "Item/?data=" + JSON.stringify(item), true);
                xhttp.send();
            }

            // clean up
            document.getElementById("curr-" + recordType + "-id").innerHtml = "";
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function getParent(element, tagName) {
            var parent = element.parentNode;
            if (parent.nodeName.toLowerCase() === tagName.toLowerCase()) {
                result = parent;
                return parent;
            }
            else {
                return getParent(parent, tagName);
            }
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function navFirst(event, siblingTable = "") {
            //
            var table = getParent(event.target, "table");
            var tableElementId = table.id;      // e.g. id="invoices-table"
            var currRow = getParent(event.target, "tr");
            var currRowIndexElement = currRow.querySelector("[name='" + tableElementId + "-row-number']");
            //
            if (siblingTable) {
                // get currRowIndex from 'alt' row-number element
                currRowIndexElement = currRow.querySelector("[name='" + siblingTable + "-row-number-alt']");
                currRowIndex = parseInt(currRowIndexElement.innerText);
                table = table.querySelector("table[id='" + siblingTable + "']");
                tableElementId = table.id;      // e.g. id="payments-table"
            }
            //
            var rows = table.rows;
            for (let i = 0; i < rows.length; i++) {
                var row = rows[i];
                var rowIndex = parseInt(row.querySelector("[name='" + tableElementId + "-row-number']").innerText);
                if (rowIndex !== 1) {
                    // hide row
                    row.classList.add("hidden");
                }
                else {
                    // show First row
                    row.classList.remove("hidden");
                    if (siblingTable) {
                        currRowIndexElement.innerText = 1;
                    }
                }
            }
            savePgState();
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function navPrev(event, siblingTable = "") {
            //
            var table = getParent(event.target, "table");
            var tableElementId = table.id;
            var currRow = getParent(event.target, "tr");
            var currRowIndexElement = currRow.querySelector("[name='" + tableElementId + "-row-number']");
            var currRowIndex = parseInt(currRowIndexElement.innerText);
            //
            if (siblingTable) {
                // get currRowIndex from 'alt' row-number element
                currRowIndexElement = currRow.querySelector("[name='" + siblingTable + "-row-number-alt']");
                currRowIndex = parseInt(currRowIndexElement.innerText);
                table = table.querySelector("table[id='" + siblingTable + "']");
                tableElementId = table.id;
            }
            //
            if (currRowIndex === 1) return;
            var rows = table.rows;
            for (let i = 0; i < rows.length; i++) {
                var row = rows[i];
                var rowIndex = parseInt(row.querySelector("[name='" + tableElementId + "-row-number']").innerText);
                if (rowIndex !== currRowIndex - 1) {
                    // hide row
                    row.classList.add("hidden");
                }
                else {
                    // show Previous row
                    row.classList.remove("hidden");
                    if (siblingTable) {
                        currRowIndexElement.innerText = currRowIndex - 1;
                    }
                }
            }
            savePgState();
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function navNext(event, siblingTable = "") {
            //
            var table = getParent(event.target, "table");
            var tableName = table.id;      // e.g. id="invoices-table" (second level of table nesting, Customer being first level; Payments and Charge Items 3rd level nesting)
            var currRow = getParent(event.target, "tr");
            var currRowIndexElement = currRow.querySelector("[name='" + tableName + "-row-number']");
            var currRowIndex = parseInt(currRowIndexElement.innerText);
            //
            if (siblingTable) {
                // get currRowIndex from 'alt' row-number element
                currRowIndexElement = currRow.querySelector("[name='" + siblingTable + "-row-number-alt']");
                currRowIndex = parseInt(currRowIndexElement.innerText);
                table = table.querySelector("table[id='" + siblingTable + "']");
                tableName = table.id;
            }
            //
            var rows = table.rows;
            if (currRowIndex === rows.length) return;
            for (let i = 0; i < rows.length; i++) {
                var row = rows[i];
                var rowIndexSpan = row.querySelector("[name='" + tableName + "-row-number']");
                var rowIndex = parseInt(rowIndexSpan.innerText);
                if (rowIndex !== currRowIndex + 1) {
                    // hide row
                    row.classList.add("hidden");
                }
                else {
                    // show Next row
                    row.classList.remove("hidden");
                    if (siblingTable) {
                        currRowIndexElement.innerText = currRowIndex + 1;
                    }
                }
            }
            savePgState();
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function navLast(event, siblingTable = "") {
            //
            var table = getParent(event.target, "table");
            var tableElementId = table.id;      // e.g. id="invoices-table"
            var currRow = getParent(event.target, "tr");
            var currRowIndexElement = currRow.querySelector("[name='" + tableElementId + "-row-number']");
            //
            if (siblingTable) {
                // get currRowIndex from 'alt' row-number element
                currRowIndexElement = currRow.querySelector("[name='" + siblingTable + "-row-number-alt']");
                currRowIndex = parseInt(currRowIndexElement.innerText);
                table = table.querySelector("table[id='" + siblingTable + "']");
                tableElementId = table.id;      // e.g. id="payments-table"
            }
            //
            var rows = table.rows;
            for (let i = 0; i < rows.length - 1; i++) {
                var row = rows[i];
                // hide row
                row.classList.add("hidden");
            }
            // show Last row
            rows[rows.length - 1].classList.remove("hidden");
            if (siblingTable) {
                currRowIndexElement.innerText = rows.length;
            }
            savePgState();
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function toggleBarcodeInput(event) {
            var container = event.target.parentNode.querySelector("[name='upc-input-container']")
            if (container.classList.contains("hidden")) {
                container.classList.remove("hidden");
                event.target.parentNode.querySelector("[name='scan-upc']").classList.add("active");
                container.querySelector("[name='upc-input']").focus();
            }
            else {
                container.classList.add("hidden");
                event.target.parentNode.querySelector("[name='scan-upc']").classList.remove("active");
            }
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function getProductByUPC(event, requestorId, requestingForm) {
            if (event.keyCode !== 13) return;

            var currIdElement = "";
            switch (requestingForm) {
                case "Invoice":
                    currIdElement = "curr-invoice-id";
                    break;
                case "Layaway":
                    currIdElement = "curr-layaway-id";
                    break;
                case "POSSale":
                    currIdElement = "curr-possale-id";
                    break;
                case "OnlineOrder":
                    currIdElement = "curr-onlineorder-id";
                    break;
                default:
                    return;
            }

            document.getElementById(currIdElement).innerHTML = requestorId;
            var searchUPC = event.target.value;
            event.target.value = "";

            if (searchUPC.trim() === "") {
                event.target.parentNode.classList.add("hidden");
                return;
            }

            var table = document.getElementById("product-lookup-table");

            var rows = table.getElementsByTagName("tr");
            for (i = 0; i < rows.length; i++) {
                var row = rows[i];
                var upc = row.querySelector("span[name='UPC']").innerHTML;
                if (upc === searchUPC) {
                    // add product to current subform record
                    var productId = row.querySelector("span[name='Id']").innerHTML;
                    copyProductData(event, productId, row, requestorId);
                    return;
                }
            }
            ShowMessage("<h3 class='text-primary'>Product <span class='text-danger'>'" + searchUPC + "'</span> not found.</h3>")
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function showLayawayItemSaveBtn(event) {
            var btn = getParent(event.target, "tr").querySelector("input[name='layaway-item-save'], button[name='layaway-item-save']");
            btn.classList.remove("hidden");
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function showInvoiceItemSaveBtn(event) {
            var btn = getParent(event.target, "tr").querySelector("input[name='invoice-item-save'], button[name='invoice-item-save']");
            btn.classList.remove("hidden");
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function updateInvoiceItem(event, itemId) {
            updateChargeItem(event, itemId, "invoice", getCurrInvoicePgIndex);
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function updateLayawayItem(event, itemId) {
            updateChargeItem(event, itemId, "layaway", getCurrLayawayPgIndex);
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function updateChargeItem(event, itemId, itemType, getCurrPgIndexFunction) {
            var parent = getParent(event.target, "tr");
            var btn = parent.querySelector("button");

            var priceOldValueSpan = parent.querySelector("[name='PriceOldValue']");
            var priceOldValue = parseFloat(priceOldValueSpan.innerText);

            var descriptionOldValueSpan = parent.querySelector("[name='ProductDescriptionOldValue']");

            var quantityOldValueSpan = parent.querySelector("[name='QuantityOldValue']");
            var quantityOldValue = parseFloat(quantityOldValueSpan.innerText);

            var descriptionInput = parent.querySelector("input[id='item_ProductDescription'");
            var description = descriptionInput.value;
            if (!description || !description.trim()) {
                ShowMessage("Description cannot be blank.");
                return;
            }

            var quantityInput = parent.querySelector("input[id='item_Quantity'");
            var quantity = quantityInput.value;
            if (isNaN(quantity) || quantity === "" || parseInt(quantity) < 0) {
                ShowMessage("Quantity must be a number greater than zero.");
                return;
            }

            var priceInput = parent.querySelector("[id='item_Price']");
            var price = priceInput.value;
            if (isNaN(price) || price === "" || parseFloat(price) < 0) {
                ShowMessage("Price must be a number greater than zero.");
                return;
            }
            var amountChange = parseFloat(price) * parseInt(quantity) - priceOldValue * quantityOldValue;

            // upload data
            var xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function () {
                if (this.readyState === 4 && this.status === 200) {
                    var responseText = this.responseText;
                    var responseObject = JSON.parse(responseText);
                    if (responseObject.Successful === true) {
                        var oldPrice = responseObject.OldValue;
                        priceInput.value = parseFloat(price).toFixed(2);
                        parent.querySelector("[name='line-total']").innerText = (quantity * parseFloat(price)).toFixed(2);
                        btn.classList.add("hidden");
                        updateCustomerTotals(itemType + "s-table", amountChange, getCurrPgIndexFunction());
                        descriptionOldValueSpan.innerText = description;
                        quantityOldValueSpan.innerText = quantity;
                        priceOldValueSpan.innerText = price;
                    }
                    else if (responseObject.Message) {
                        ShowMessage(responseObject.Message, "<span class='text-warning'>Server Error</span>");
                    }
                }
            };
            var ItemType = itemType.substring(0, 1).toUpperCase() + itemType.substring(1);
            xhttp.open("GET", "/CustomerManager/Update" + ItemType + "Item/?Id=" + itemId + "&productDescription=" + description + "&quantity=" + quantity + "&price=" + price, true);
            xhttp.send();
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function showSubformSaveBtn(event) {
            var tableRow = getParent(event.target, "tr");

            var btn = tableRow.querySelector("input[name='subform-save'], button[name='subform-save']");
            btn.classList.remove("hidden");

            var scanUpcBtn = tableRow.querySelector("[name='scan-upc']");
            scanUpcBtn.classList.add("hidden");
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function updateLayaway(event, itemId) {
            var parent = getParent(event.target, "tr");
            var priceInput = parent.querySelector("input[type='text']");
            var price = priceInput.value;
            if (isNaN(price) || price < 0) {
                ShowMessage("The price must be a number greater than zero.");
                return;
            }
            //upload data
            var xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function () {
                if (this.readyState === 4 && this.status === 200) {
                    var responseText = this.responseText;
                    var responseObject = JSON.parse(responseText);
                    if (responseObject.Successful === true) {
                        priceInput.value = parseFloat(price).toFixed(2);
                        event.target.style.display = "none";
                    }
                    else if (responseObject.Message) {
                        ShowMessage(responseObject.Message, "<span class='text-warning'>Server Error</span>");
                    }
                }
            };
            xhttp.open("GET", "/CustomerManager/UpdateLayawayItemPrice/?Id=" + itemId + "&price=" + price, true);
            xhttp.send();
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function setSubformElementVars(event) {
            // helper method initializes and returns object variables--representing various elements
            // on Customer UI--for use as required by the calling functions
            var clickedBtn = event.target;
            var tableRow = getParent(clickedBtn, "tr");
            // store elements in object e
            var e = {
                tableRow: tableRow,
                scanUpcBtn: tableRow.querySelector("[name='scan-upc']"),
                productLookupBtn: tableRow.querySelector("[name='product-lookup']"),
                chargeItemsBtn: tableRow.querySelector("[name='charge-items']"),
                subItemsTable: tableRow.querySelector("[id='sub-items-table']"),
                newPatmentDiv: tableRow.querySelector("[id='new-payment']"),
                paymentsDiv: tableRow.querySelector("[id='payments-table']"),
                paymentListDiv: tableRow.querySelector("[id='payment-list-table']"),
                upcInput: tableRow.querySelector("[name='upc-input-container']")
            };

            // hide all elements
            e.scanUpcBtn.classList.add("hidden");
            e.productLookupBtn.classList.add("hidden");
            e.chargeItemsBtn.classList.add("hidden");
            e.subItemsTable.classList.add("hidden");
            e.paymentsDiv.classList.add("hidden");
            e.paymentListDiv.classList.add("hidden");
            e.newPatmentDiv.classList.add("hidden");
            e.upcInput.classList.add("hidden");

            // return initialized element set (set of element objects inside object e)
            return e;
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function addPayment(event, receivableSource) {
            // displays New Payment View & initializes values
            var e = setSubformElementVars(event);
            e.chargeItemsBtn.classList.remove("hidden");
            e.newPatmentDiv.classList.remove("hidden");
            e.scanUpcBtn.classList.remove("active");

            var receivableSrcIdOrigin = e.tableRow.querySelector("[id='receivable-source-id']");
            var receivableSrcIdDest = e.tableRow.querySelector("[name='ReceivableSourceId']");
            receivableSrcIdDest.innerText = receivableSrcIdOrigin.innerHTML;

            var receivableSrcDest = e.tableRow.querySelector("[name='ReceivableSource']");
            receivableSrcDest.innerText = receivableSource;

            closeProductLookup(event);

            var paymentMode = e.tableRow.querySelector("[name='PaymentMode']").value;
            if (paymentMode === "credit card") {
                e.tableRow.querySelector("[id='creditcard-group']").classList.remove("hidden");
            }
            else if (paymentMode === "check") {
                e.tableRow.querySelector("[id='check-group']").classList.remove("hidden");
            }
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function showPayments(event) {
            // displays Payment Edit View
            var e = setSubformElementVars(event);
            e.chargeItemsBtn.classList.remove("hidden");
            e.paymentsDiv.classList.remove("hidden");
            e.scanUpcBtn.classList.remove("active");
            closeProductLookup(event);
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function showPaymentList(event) {
            // displays Payment List View
            var e = setSubformElementVars(event);
            e.chargeItemsBtn.classList.remove("hidden");
            e.paymentListDiv.classList.remove("hidden");
            e.scanUpcBtn.classList.remove("active");
            closeProductLookup(event);
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function showChargeItems(event) {
            // displays Invoiced Items View
            var e = setSubformElementVars(event);
            e.scanUpcBtn.classList.remove("hidden");
            e.productLookupBtn.classList.remove("hidden");
            e.subItemsTable.classList.remove("hidden");
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function goToPaymentEdit(event) {
            var clickedLink = event.target;
            var parentTD = getParent(clickedLink, "td");
            var currPaymentIndex = parentTD.innerText;

            var parentTable = getParent(event.target, "table");     // parent table to the clicked link
            parentTableName = parentTable.id;

            var grandParentRow = getParent(parentTable, "tr");      // this is a row of ITS parent table
            var receivableSourcId = grandParentRow.querySelector("[id='receivable-source-id']").innerText;

            var paymentsTable = grandParentRow.querySelector("[id='payments-table-" + receivableSourcId + "']");

            grandParentRow.querySelector("[name='payments-menu-show-payments']").click();

            for (let i = 0; i < paymentsTable.rows.length; i++) {
                let row = paymentsTable.rows[i];
                if (i === parseInt(currPaymentIndex) - 1) {
                    row.classList.remove("hidden");
                }
                else {
                    row.classList.add("hidden");
                    grandParentRow.querySelector("[name='payments-table-" + receivableSourcId + "-row-number-alt']").innerText = currPaymentIndex;
                }
            }
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function setPaymentMode(event) {
            var btn = event.target;
            var tableRow = getParent(btn, "tr");
            var optSelected = btn.title;

            var paymentModeInput = tableRow.querySelector("[name='PaymentMode']");
            paymentModeInput.value = optSelected;

            var creditcardGrp = tableRow.querySelector("[id='creditcard-group']");
            var checkGrp = tableRow.querySelector("[id='check-group']");

            switch (optSelected) {
                case "credit card":
                    creditcardGrp.classList.remove("hidden");
                    checkGrp.classList.add("hidden");
                    break;
                case "check":
                    creditcardGrp.classList.add("hidden");
                    checkGrp.classList.remove("hidden");
                    break;
                default:
                    creditcardGrp.classList.add("hidden");
                    checkGrp.classList.add("hidden");
                    return;
            }
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function validatePaymentInput(payment) {
            var message = "";
            if (!payment.PaymentDate)
                message = "<p>'Payment Date' cannot be empty.</p>";

            if (isNaN(payment.Amount) || payment.Amount === "" || parseFloat(payment.Amount) <= 0) {
                message += "<p>'Amount' must be a number and greater than zero.</p>";
            }

            if (payment.PaymentMode === "credit card") {
                if (!(payment.CreditCardHolder.trim())) {
                    message += "<p>'Card Holder' cannot be empty.</p>";
                }
                if (!(payment.CreditCardNo.trim())) {
                    message += "<p>'Card Number' cannot be empty.</p>";
                }

                if (isNaN(payment.CreditCardExpMonth) || payment.CreditCardExpMonth === "" || parseInt(payment.CreditCardExpMonth) <= 0) {
                    message += "<p>'Exp Month' must be greater than zero.</p>";
                }

                if (isNaN(payment.CreditCardExpYear) || payment.CreditCardExpYear === "" || parseInt(payment.CreditCardExpYear) <= 0) {
                    message += "<p>'Exp Year' must be greater than zero.</p>";
                }

                if (!(payment.CreditCardCVV.trim())) {
                    message += "<p>'Verification Code' cannot be empty.</p>";
                }

                if (!(payment.CreditCardName.trim())) {
                    message += "<p>'Card Name' cannot be empty.</p>";
                }
            }
            else if (payment.PaymentMode === "check") {
                if (!(payment.CheckNo.trim())) {
                    message += "<p>'Check Number' cannot be empty.</p>";
                }
                if (!(payment.CheckWriter.trim())) {
                    message += "<p>'Issued By' cannot be empty.</p>";
                }
            }
            return message;
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function showPaymentSaveBtn(event) {
            var tableRow = getParent(event.target, "tr");
            var btn = tableRow.querySelector("[name='save-payment']");
            btn.classList.remove("hidden");
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function clearNewPaymentInput(tableRow) {
            window.location.reload();
            tableRow.querySelector("[name='PaymentDate']").value = "";
            tableRow.querySelector("[name='Amount']").value = 0;
            tableRow.querySelector("[name='PaymentMode']").value = "cash";
            tableRow.querySelector("[name='CheckNo']").value = "";
            tableRow.querySelector("[name='CheckWriter']").value = "";
            tableRow.querySelector("[name='CheckImage']").value = "";
            tableRow.querySelector("[name='CreditCardHolder']").value = "";
            tableRow.querySelector("[name='CreditCardExpMonth']").value = 0;
            tableRow.querySelector("[name='CreditCardExpYear']").value = 0;
            tableRow.querySelector("[name='CreditCardCVV']").value = "";
            tableRow.querySelector("[name='CreditCardNo']").value = "";
            tableRow.querySelector("[name='CreditCardName']").value = "";
            var activeSubform = getActiveSubForm();
            var receivableRourceIndex = tableRow.getElementById("subtable-row-number").innerText;
            //"row-" + ViewBag.ReceivableSourceIndex + "-" + paymentIndex;

        }
    </script>
}