@model BusinessManager.Core.Models.Customer

@{
    ViewBag.Title = "Edit Customer";
    ViewBag.Prducts = Model.ProductList;
}

@using (Html.BeginForm("Edit", "CustomerManager", FormMethod.Post, new { onsubmit = "return false", id = "customer-edit-form" }))
{
    @Html.AntiForgeryToken()

    <h2>Edit Customer</h2>
    <hr style="margin-top: 0; margin-bottom: 0" />
    <style>
        .product-lookup-popup {
            position: absolute;
            left: 0;
            top: 0;
        }
    </style>
    <div style="display: flex">
        <div id="customer-section" class="form-horizontal col-md-4 border border-warning border-remove-right " style="padding: 10px; background-color: GhostWhite">
            <div id="customer-info">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.Id)
                @Html.HiddenFor(model => model.UserId)

                @{
                    var labelStyle = "width: 35%; padding-right: 0";
                    var inputBoxStyle = "width: 95%; margin-left: 15px; margin-right: 0";
                }
                <div class="form-group">
                    @Html.LabelFor(model => model.CreatedAt, htmlAttributes: new { @class = "control-label col-md-3", @style = @labelStyle })
                    <div class="col-md-7" style="padding-top: 5px">
                        @Html.DisplayFor(model => model.CreatedAt, new { htmlAttributes = new { @class = "form-control", @style = @inputBoxStyle } }).ToString().Replace("-07:00", "")
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-3", @style = @labelStyle })
                    <div class="col-md-7" style="padding: 0">
                        @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", @style = @inputBoxStyle } })
                        @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-3", @style = @labelStyle })
                    <div class="col-md-7" style="padding: 0">
                        @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control", @style = @inputBoxStyle } })
                        @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-3", @style = @labelStyle })
                    <div class="col-md-7" style="padding: 0">
                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @style = @inputBoxStyle } })
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "control-label col-md-3", @style = @labelStyle })
                    <div class="col-md-7" style="padding: 0">
                        @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control", @style = @inputBoxStyle } })
                        @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Phone2, htmlAttributes: new { @class = "control-label col-md-3", @style = @labelStyle })
                    <div class="col-md-7" style="padding: 0">
                        @Html.EditorFor(model => model.Phone2, new { htmlAttributes = new { @class = "form-control", @style = @inputBoxStyle } })
                        @Html.ValidationMessageFor(model => model.Phone2, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.CompanyName, htmlAttributes: new { @class = "control-label col-md-3", @style = @labelStyle })
                    <div class="col-md-7" style="padding: 0">
                        @Html.EditorFor(model => model.CompanyName, new { htmlAttributes = new { @class = "form-control", @style = @inputBoxStyle } })
                        @Html.ValidationMessageFor(model => model.CompanyName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Street, htmlAttributes: new { @class = "control-label col-md-3", @style = @labelStyle })
                    <div class="col-md-7" style="padding: 0">
                        @Html.EditorFor(model => model.Street, new { htmlAttributes = new { @class = "form-control", @style = @inputBoxStyle } })
                        @Html.ValidationMessageFor(model => model.Street, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label col-md-3", @style = @labelStyle })
                    <div class="col-md-7" style="padding: 0">
                        @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control", @style = @inputBoxStyle } })
                        @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.State, htmlAttributes: new { @class = "control-label col-md-3", @style = @labelStyle })
                    <div class="col-md-7" style="padding: 0">
                        @Html.EditorFor(model => model.State, new { htmlAttributes = new { @class = "form-control", @style = @inputBoxStyle } })
                        @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ZipCode, htmlAttributes: new { @class = "control-label col-md-3", @style = @labelStyle })
                    <div class="col-md-7" style="padding: 0">
                        @Html.EditorFor(model => model.ZipCode, new { htmlAttributes = new { @class = "form-control", @style = @inputBoxStyle } })
                        @Html.ValidationMessageFor(model => model.ZipCode, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Website, htmlAttributes: new { @class = "control-label col-md-3", @style = @labelStyle })
                    <div class="col-md-7" style="padding: 0">
                        @Html.EditorFor(model => model.Website, new { htmlAttributes = new { @class = "form-control", @style = @inputBoxStyle } })
                        @Html.ValidationMessageFor(model => model.Website, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-12" style="text-align: center">
                        <div class="btn-group">
                            <button onclick="saveCustomer(event)"
                                    id="save-customer-btn"
                                    type="submit"
                                    class="btn btn-default btn-sm">
                                Save
                                <span style="margin-left: 5px" class="glyphicon glyphicon-edit"></span>
                            </button>
                            <button onclick="showInvoices(event)"
                                    id="show-invoices-btn"
                                    type="button"
                                    class="btn btn-default btn-sm">
                                Show Invoices
                            </button>
                            <button onclick="showLayaways(event)"
                                    id="show-layaways-btn"
                                    type="button"
                                    value="Show Layaways"
                                    class="btn btn-default btn-sm">
                                Show Layaways
                            </button>
                            <button onclick="addInvoice(event)"
                                    id="add-invoice-btn"
                                    type="button"
                                    class="btn btn-default btn-sm btn-danger-text hidden">
                                Add Invoice
                            </button>
                            <button onclick="addLayaway(event)"
                                    id="add-layaway-btn"
                                    type="button"
                                    class="btn btn-default btn-sm hidden btn-danger-text">
                                Add Layaway
                            </button>
                        </div>
                    </div>
                    <p class="col-md-12" style="margin: 30px 10px 10px 10px">@Html.ActionLink("Back to Customer List", "Index")</p>
                </div>
            </div>

            <div id="product-lookup" class="product-lookup-popup" style="display: none">
                @Html.Partial("ProductLookup", Model.ProductList)
                <hr style="border-width: 2px; border-color: red" />
                <button onclick="closeProductLookup(event)" class="btn btn-default btn-sm pull-right" style="margin: 6px 20px 3px 5px">
                    Close List
                </button>
                <div style="margin: 0 0 0 25px">@Html.ActionLink("Back to Customer List", "Index")</div>
            </div>
        </div>
        <div id="alt-subform-container" class="col-md-8 bg-warning" style="padding: 0; margin: 0">
           
        </div>
        <div id="layaways-container" class="col-md-8 bg-info hidden" style="padding: 0; margin: 0">
            @{
                var itemCount = 0;
                var layawayCount = Model.Layaways.Count;
                foreach (var layaway in Model.Layaways)
                {
                    itemCount += layaway.LayawayItems.Count;
                }
                var fullName = Model.FirstName + ' ' + Model.LastName;
                var companyName = Model.CompanyName == "" ? "" : " (" + Model.CompanyName + ")";
                var combinedName = fullName + companyName;
            }
            <span id="curr-layaway-id" style="display: none"></span>
            <div style="margin: 0px 0px 5px 25px">
                <h4>Customer Layaways</h4>
                <strong>
                    <span class="text-primary" style="float: right; margin:3px 30px 3px 3px">@combinedName </span>
                    <span style="float: right; margin:3px 10px 3px 3px">Customer: </span>
                </strong>
                <span style="margin:3px">Layaways: @layawayCount</span>
                <span style="margin:3px">Total Layaway Items: @itemCount</span>
            </div>
            @Html.Partial("Layaways", Model.Layaways)
        </div>
        <div id="invoices-container" class="col-md-8 hidden" style="padding: 0; margin: 0; background-color: #ffeea8">  @* #ffeea8 = yellow 1 *@
            @{
                var invoiceItemCount = 0;
                var invoiceCount = Model.Invoices.Count;
                foreach (var invoice in Model.Invoices)
                {
                    invoiceItemCount += invoice.InvoiceItems.Count;
                }
                var invoiceFullName = Model.FirstName + ' ' + Model.LastName;
                var invoiceCompanyName = Model.CompanyName == "" ? "" : " (" + Model.CompanyName + ")";
                var invoicecombinedName = invoiceFullName + invoiceCompanyName;
            }
            <span id="curr-invoice-id" style="display: none"></span>
            <div style="margin: 0px 0px 5px 25px">
                <h4>Customer Invoices</h4>
                <strong>
                    <span class="text-primary" style="float: right; margin:3px 30px 3px 3px">@invoicecombinedName </span>
                    <span style="float: right; margin:3px 10px 3px 3px">Customer: </span>
                </strong>
                <span style="margin:3px">Invoices: @Model.Invoices.Count</span>
                <span style="margin:3px">Total Invoice Items: @invoiceItemCount</span>
            </div>
            @Html.Partial("Invoices", Model.Invoices)
        </div>
    </div>
}


@section Scripts {
    <script type="text/javascript">
        /////////////////////////////////////////////////////////////////////////////////////////////

        document.body.onpageshow = function (event) {
            restorePgState();
            savePgState();
        };
        
        /////////////////////////////////////////////////////////////////////////////////////////////

        setInvoicesDatePickers(event);
        setLayawaysDatePickers(event);
        setCustomerTotals(event);

        /////////////////////////////////////////////////////////////////////////////////////////////

        document.onkeypress = function (event) {
            if (event.keyCode === 13) {
                event.preventDefault();
            }
        };

        /////////////////////////////////////////////////////////////////////////////////////////////
                
        function focusMatchingInput(input_id) {
            var parentElement1 = event.target.parentNode;
            var parentElement2 = parentElement1.parentNode;
            if (parentElement2.querySelector("#" + input_id).type === "text") 
                parentElement2.querySelector("#" + input_id).select();
            else if (parentElement2.querySelector("#" + input_id).type === "date") 
                parentElement2.querySelector("#" + input_id).focus();
        }
        /////////////////////////////////////////////////////////////////////////////////////////////

        function savePgState(forceState = null) {
            //
            state = forceState;
            if (!state) {
                state = {
                    CustomerId: getCurrCustomerId(),
                    CurrSubForm: getActiveSubForm(),
                    CurrLayawayPgIndex: getCurrLayawayPgIndex(),
                    CurrInvoicePgIndex: getCurrInvoicePgIndex(),
                    CustomerEditBorder: getCustomerEditBorderState()
                };
            }
            
            var btnsVisibility = getCustomerEditBtnsVisibility();
            Object.keys(btnsVisibility).forEach(key => {
                state[key] = btnsVisibility[key];
            });
            setCookie("PageState", JSON.stringify(state), 1);
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function getCustomerEditBtnsVisibility() {
            var result = {};

            var btnElementIdList = [
               [ "save-customer-btn", "SaveCustomerButton" ],
               [ "add-invoice-btn", "AddInvoiceButton" ],
               [ "show-invoices-btn", "ShowInvoicesButton" ],
               [ "add-layaway-btn", "AddLayawayButton" ],
               [ "show-layaways-btn", "ShowLayawaysButton" ]
            ];

            btnElementIdList.forEach(elementDataPair => {
                //
                var btnElementId = elementDataPair[0];
                var statePropertyName = elementDataPair[1];
                //
                var btn = document.getElementById(btnElementId);
                if (btn.classList.contains("hidden")) {
                    result[statePropertyName] = false;
                }
                else {
                    result[statePropertyName] = true;
                }
            });
            return result;
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function restorePgState() {
            //
            var cookie = getCookie("PageState");
            if (!cookie) {
                return;
            }
            var state = JSON.parse(cookie);
            
            if (state.CustomerId !== getCurrCustomerId()) {
                return;
            }
            // restore Layaways View state
            var currLayawayPgIndex = state.CurrLayawayPgIndex;
            if (currLayawayPgIndex) {
                let table = document.getElementById("layaways-table");
                let rows = table.rows;
                for (let i = 0; i < rows.length; i++) {
                    let row = rows[i];
                    let pgIndex = row.querySelector("span[name='layaways-table-row-number']").innerHTML;
                    pgIndex = parseInt(pgIndex);
                    if (pgIndex === currLayawayPgIndex) {
                        //row.style.display = "table-row";
                        row.classList.remove("hidden");
                    }
                    else {
                        //row.style.display = "none";
                        row.classList.add("hidden");
                    }
                }
            }
            // restore Invoices View state
            var currInvoicePgIndex = state.CurrInvoicePgIndex;
            if (currInvoicePgIndex) {
                let table = document.getElementById("invoices-table");
                let rows = table.rows;
                for (let i = 0; i < rows.length; i++) {
                    let row = rows[i];
                    let pgIndex = row.querySelector("span[name='invoices-table-row-number']").innerHTML;
                    pgIndex = parseInt(pgIndex);
                    if (pgIndex === currInvoicePgIndex) {
                        //row.style.display = "table-row"
                        row.classList.remove("hidden");
                    }
                    else {
                        //row.style.display = "none"
                        row.classList.add("hidden");
                    }
                }
            }            
            // restore Alt form's View state
            var subformElementIds = ["alt-subform-container", "layaways-container", "invoices-container"];
            subformElementIds.forEach(elementId => {
                var subform = document.getElementById(elementId);
                if (elementId === state.CurrSubForm) {
                    subform.classList.remove("hidden");
                }
                else {
                    subform.classList.add("hidden");
                }
            });
            // restore Customer Buttons view state
            var btnsState = {
                "save-customer-btn": state.SaveCustomerButton,
                "add-invoice-btn": state.AddInvoiceButton,
                "show-invoices-btn": state.ShowInvoicesButton,
                "add-layaway-btn": state.AddLayawayButton,
                "show-layaways-btn": state.ShowLayawaysButton,
            }
            Object.keys(btnsState).forEach(key => {
                var btn = document.getElementById(key);
                var btnState = btnsState[key];
                if (btnState)
                    btn.classList.remove("hidden");
                else
                    btn.classList.add("hidden");
            });

            // restore Customer fields border
            document.getElementById("customer-section").className = state.CustomerEditBorder;

            expireCookie("PageState");
        }
        
        /////////////////////////////////////////////////////////////////////////////////////////////

        function getCurrCustomerId() {
            return document.getElementById("Id").value;
        }
        
        /////////////////////////////////////////////////////////////////////////////////////////////

        function getCustomerEditBorderState() {
            return document.getElementById("customer-section").className;
        }
        
        /////////////////////////////////////////////////////////////////////////////////////////////

        function getActiveSubForm() {
            var result = "";
            var subformElementIds = ["alt-subform-container", "layaways-container", "invoices-container"];
            subformElementIds.forEach(function (elementId, index) {
                var subform = document.getElementById(elementId);
                if (!subform.classList.contains("hidden")) {
                    result = elementId;
                }
            });
            return result;
        }
        
        /////////////////////////////////////////////////////////////////////////////////////////////
        
        function getCurrLayawayPgIndex() {
            var layawaysTable = document.getElementById("layaways-table");
            var tableRows = layawaysTable.rows;
            for (let i = 0; i < tableRows.length; i++) {
                var row = tableRows[i];
                //if (row.style.display !== "none") {
                if (!row.classList.contains("hidden")) {
                    var layawayPgIndex = row.querySelector("span[name='layaways-table-row-number']").innerHTML;
                    if (layawayPgIndex) {
                        layawayPgIndex = parseInt(layawayPgIndex);
                        return layawayPgIndex;
                    }
                }
            }
            return null;
        }
        
        /////////////////////////////////////////////////////////////////////////////////////////////
        
        function getCurrInvoicePgIndex() {
            var invoicesTable = document.getElementById("invoices-table");
            var tableRows = invoicesTable.rows;
            for (let i = 0; i < tableRows.length; i++) {
                var row = tableRows[i];
                //if (row.style.display !== "none") {
                if (!row.classList.contains("hidden")) {
                    var invoicePgIndex = row.querySelector("span[name='invoices-table-row-number']").innerHTML;
                    if (invoicePgIndex) {
                        invoicePgIndex = parseInt(invoicePgIndex);
                        return invoicePgIndex;
                    }
                }
            }
            return null;
        }
        
        /////////////////////////////////////////////////////////////////////////////////////////////

        function hideAllSubForms() {
            document.getElementById("alt-subform-container").classList.add("hidden");
            document.getElementById("layaways-container").classList.add("hidden");
            document.getElementById("invoices-container").classList.add("hidden");
            // also hide all the Add buttons
            document.getElementById("add-invoice-btn").classList.add("hidden");
            document.getElementById("add-layaway-btn").classList.add("hidden");
            // also show all the Show buttons
            document.getElementById("show-invoices-btn").classList.remove("hidden");
            document.getElementById("show-layaways-btn").classList.remove("hidden");
        }
        
        /////////////////////////////////////////////////////////////////////////////////////////////

        function addCustomerSectionBorder(subform) {
            //select Customer-Edit section
            var customerSection = document.getElementById("customer-section");
            // clear all borders from it
            var removeTheseFirst = ["border-golden", "border-primary", "border-warning"];
            removeTheseFirst.forEach((item) => {
                customerSection.classList.remove(item);
            });
            // now select specified border
            if (subform.toLowerCase().indexOf("invoice") > -1) {
                customerSection.classList.add("border-golden");
            }
            else if (subform.toLowerCase().indexOf("layaway") > -1) {
                customerSection.classList.add("border-primary");
            }
            else {
                customerSection.classList.add("border-warning");
                return;
            }
        }
        
        /////////////////////////////////////////////////////////////////////////////////////////////

        function showInvoices(event) {
            hideAllSubForms();
            document.getElementById("invoices-container").classList.remove("hidden");
            document.getElementById("show-invoices-btn").classList.add("hidden");
            document.getElementById("add-invoice-btn").classList.remove("hidden");
            addCustomerSectionBorder("Invoice");
            savePgState();
        }
        
        /////////////////////////////////////////////////////////////////////////////////////////////

        function showLayaways(event) {
            hideAllSubForms();
            document.getElementById("layaways-container").classList.remove("hidden");
            document.getElementById("show-layaways-btn").classList.add("hidden");
            document.getElementById("add-layaway-btn").classList.remove("hidden");
            addCustomerSectionBorder("Layaway");
            savePgState();
        }
        
        /////////////////////////////////////////////////////////////////////////////////////////////

        function saveCustomer(event) {
            document.getElementById('customer-edit-form').submit();
        }
        
        /////////////////////////////////////////////////////////////////////////////////////////////

        function setInvoicesDatePickers(event) {
            var container = document.getElementById("invoices-container");
            var table = container.querySelector("table");
            var rows = table.rows;
            for (let i = 0; i < rows.length; i++) {
                var row = rows[i];
                var invoiceDateEl = row.querySelector("[id='invoice_InvoiceDate']");
                var invoiceDate = invoiceDateEl.getAttribute("value");
                var date1 = new Date(invoiceDate);
                var newInvoiceDate = date1.getFullYear() + "-" + (date1.getMonth() + 1).toString().padStart(2, '0') + "-" + date1.getDate().toString().padStart(2, '0');
                invoiceDateEl.value = newInvoiceDate; 
            }
        }
        
        /////////////////////////////////////////////////////////////////////////////////////////////

        function setLayawaysDatePickers(event) {
            var container = document.getElementById("layaways-container");
            var table = container.querySelector("table");
            var rows = table.rows;
            for (let i = 0; i < rows.length; i++) {
                var row = rows[i];
                var agreementDateEl = row.querySelector("[id='layaway_AgreementDate']");
                var agreementDate = agreementDateEl.getAttribute("value");
                var date1 = new Date(agreementDate);
                var newAgreementDate = date1.getFullYear() + "-" + (date1.getMonth() + 1).toString().padStart(2, '0') + "-" + date1.getDate().toString().padStart(2, '0');
                agreementDateEl.value = newAgreementDate; 
                
                var dueDateEl = row.querySelector("[id='layaway_DueDate']");
                var dueDate = dueDateEl.getAttribute("value");
                var date2 = new Date(dueDate);
                var newDueDate = date2.getFullYear() + "-" + (date2.getMonth() + 1).toString().padStart(2, '0') + "-" + date2.getDate().toString().padStart(2, '0');
                dueDateEl.value = newDueDate; 
            }
        }
        
        /////////////////////////////////////////////////////////////////////////////////////////////

        function setCustomerTotals(event) {
            // Invoices
            var table = document.getElementById("invoices-table");
            var rows = table.rows;
            let row = rows[rows.length - 1]; 
            var customerInvoiceChargesTotal = row.querySelector("[name='charges-accumulator']").innerHTML;
            for (let i = 0; i < rows.length; i++) {
                let row = rows[i];
                row.querySelector("[name='all-pending-transaction-charges']").innerHTML = customerInvoiceChargesTotal;
            }            

            // Layaways
            var table2 = document.getElementById("layaways-table");
            rows = table2.rows;
            row = rows[rows.length - 1];
            var customerLayawayChargesTotal = row.querySelector("[name='charges-accumulator']").innerHTML;
            for (let i = 0; i < rows.length; i++) {
                let row = rows[i];
                row.querySelector("[name='all-pending-transaction-charges']").innerHTML = customerLayawayChargesTotal;
            }
        }

        //

        function addCommasToNumber(number) {
            var result = "";
            if (isNaN(number)) {
                return result;
            }
            var n = number.toString().replace(/,/g, "");
            var indexOfDot = n.indexOf(".")
            result = n.substring(indexOfDot);   // add decimal part to result
            n = n.substring(0, indexOfDot);     // truncate decimal part from temp variable, n
            var arr = n.split("");
            for (let i = arr.length - 1; i >= 0; i -= 3) {
                result = arr[i] + (result && i < arr.length - 1 ? "," : "") + result;
                if (i - 1 >= 0) {
                    result = arr[i - 1] + result
                    if (i - 2 >= 0) {
                        result = arr[i-2] + result;
                    }
                }
            }
            console.log(result);
            return result;
        }
        
        /////////////////////////////////////////////////////////////////////////////////////////////

        function updateCustomerTotals(table_id, amountAdded = null, rowIndex = null) {
            if (!amountAdded || !rowIndex) {
                return;
            }
            amountAdded = parseFloat(amountAdded).toFixed(2);

            var table = document.getElementById(table_id);
            var rows = table.rows;
            for (let i = 0; i < rows.length; i++) {
                var row = rows[i];
                if (i === (rowIndex - 1)) {
                    var oldTransactionCharges = (row.querySelector("span[name='transaction-charges']").innerHTML).replace("$ ", "");          // remove leading '$ ' from UI data
                    oldTransactionCharges = parseFloat(oldTransactionCharges);
                    var newTransactionCharges = parseFloat(oldTransactionCharges) + parseFloat(amountAdded);
                    row.querySelector("span[name='transaction-charges']").innerHTML = parseFloat(newTransactionCharges).toFixed(2);
                }
                var oldAllTransactionCharges = (row.querySelector("[name='all-pending-transaction-charges']").innerHTML).replace("$ ", "");   // remove leading '$ ' from UI data
                oldAllTransactionCharges = oldAllTransactionCharges.replace(/,/g, "");                                                        // remove all commas  
                var newAllTransactionCharges = parseFloat(oldAllTransactionCharges) + parseFloat(amountAdded);
                row.querySelector("[name='all-pending-transaction-charges']").innerHTML = "$ " + addCommasToNumber(parseFloat(newAllTransactionCharges).toFixed(2));
            }
        }
        
        /////////////////////////////////////////////////////////////////////////////////////////////

        function addLayaway(event) {
            // save page state
            var state = {
                CustomerId: getCurrCustomerId(),
                CurrSubForm: "layaways-container",
                CurrLayawayPgIndex: 1,
                CurrInvoicePgIndex: getCurrInvoicePgIndex(),
                CustomerEditBorder: getCustomerEditBorderState()
            }
            savePgState(state);

            var customerId = document.getElementById("Id").value;

            //upload data
            var xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function () {
                if (this.readyState === 4 && this.status === 200) {
                    var responseText = this.responseText;
                    var responseObject = JSON.parse(responseText);
                    if (responseObject.Successful === true) {
                        location.reload();
                    }
                    else if (responseObject.Message) {
                        ShowMessage(responseObject.Message, "<span class='text-warning'>Server Error</span>");
                    }
                }
            };
            xhttp.open("GET", "/CustomerManager/AddLayaway/?customerId=" + customerId, true);
            xhttp.send();
        }
        
        /////////////////////////////////////////////////////////////////////////////////////////////

        function addInvoice(event) {
            // save page state
            var state = {
                CustomerId: getCurrCustomerId(),
                CurrSubForm: "invoices-container",
                CurrLayawayPgIndex: getCurrLayawayPgIndex(),
                CurrInvoicePgIndex: 1,
                CustomerEditBorder: getCustomerEditBorderState()
            }
            savePgState(state);
            
            var customerId = document.getElementById("Id").value;

            //upload data
            var xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function () {
                if (this.readyState === 4 && this.status === 200) {
                    var responseText = this.responseText;
                    var responseObject = JSON.parse(responseText);
                    if (responseObject.Successful === true) {
                        location.reload();
                    }
                    else if (responseObject.Message) {
                        ShowMessage(responseObject.Message, "<span class='text-warning'>Server Error</span>");
                    }
                }
            };
            xhttp.open("GET", "/CustomerManager/AddInvoice/?customerId=" + customerId, true);
            xhttp.send();
        }
        
        /////////////////////////////////////////////////////////////////////////////////////////////

        function deleteLayaway(event) {
            // save page state
            var currPg = getCurrLayawayPgIndex();
            var newPg = 0;
            var table = document.getElementById("layaways-table");
            if (table.rows.length > parseInt(currPg)) {
                newPg = parseInt(currPg);
            }
            else {
                newPg = parseInt(currPg) - 1;
            }
            var state = {
                CustomerId: getCurrCustomerId(),
                CurrSubForm: "layaways-container",
                CurrLayawayPgIndex: newPg,
                CurrInvoicePgIndex: getCurrInvoicePgIndex(),
                CustomerEditBorder: getCustomerEditBorderState()
            }
            savePgState(state);

            var layawayId = (event.target.parentNode).parentNode.querySelector("[name='layaway-id']").innerHTML;

            //upload data
            var xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function () {
                if (this.readyState === 4 && this.status === 200) {
                    var responseText = this.responseText;
                    var responseObject = JSON.parse(responseText);
                    if (responseObject.Successful === true) {
                        location.reload();
                    }
                    else if (responseObject.Message) {
                        ShowMessage(responseObject.Message, "<span class='text-warning'>Server Error</span>");
                    }
                }
            };
            xhttp.open("GET", "/CustomerManager/DeleteLayaway/?Id=" + layawayId, true);
            xhttp.send();
        }
        
        /////////////////////////////////////////////////////////////////////////////////////////////

        function deleteInvoice(event) {
            // save page state
            var currPg = getCurrInvoicePgIndex();
            var newPg = 0;
            var table = document.getElementById("invoices-table");
            if (table.rows.length > parseInt(currPg)) {
                newPg = parseInt(currPg);
            }
            else {
                newPg = parseInt(currPg) - 1;
            }
            var state = {
                CustomerId: getCurrCustomerId(),
                CurrSubForm: "invoices-container",
                CurrLayawayPgIndex: getCurrLayawayPgIndex(),
                CurrInvoicePgIndex: newPg,
                CustomerEditBorder: getCustomerEditBorderState()
            }
            savePgState(state);

            var invoiceId = (event.target.parentNode).parentNode.querySelector("[name='invoice-id']").innerHTML;

            //upload data
            var xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function () {
                if (this.readyState === 4 && this.status === 200) {
                    var responseText = this.responseText;
                    var responseObject = JSON.parse(responseText);
                    if (responseObject.Successful === true) {
                        location.reload();
                    }
                    else if (responseObject.Message) {
                        ShowMessage(responseObject.Message, "<span class='text-warning'>Server Error</span>");
                    }
                }
            };
            xhttp.open("GET", "/CustomerManager/DeleteInvoice/?Id=" + invoiceId, true);
            xhttp.send();
        }
        
        /////////////////////////////////////////////////////////////////////////////////////////////

        function saveSubformData(event, route, getData, clearInput) {
            //
            var clickedElement = event.target;

            // get data form UI
            var tableRow = getParent(clickedElement, "tr");
            var data = getData(tableRow);

            if (data === null)
                return;

            // reference actual button clicked (not its child elements)
            var btn = clickedElement;
            if (btn.nodeName.toLowerCase() !== "button") {
                btn = getParent(clickedElement, "button");
            }

            // reference 'Scan Bardcode' button
            var scanUpcBtn = tableRow.querySelector("[name='scan-upc']");

            //upload data
            var xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function () {
                if (this.readyState === 4 && this.status === 200) {
                    var responseText = this.responseText;
                    var responseObject = JSON.parse(responseText);
                    if (responseObject.Successful === true) {
                        btn.classList.add("hidden");
                        scanUpcBtn.classList.remove("hidden");
                        if (clearInput) {
                            clearInput(tableRow);
                        }
                        ShowMessage("<h4 class='text-primary' style='margin-left: 20px'>Payment Saved!</h4>");
                    }
                    else if (responseObject.Message) {
                        ShowMessage(responseObject.Message, "<span class='text-warning'>Server Error</span>");
                    }
                }
            };
            xhttp.open("GET", "/CustomerManager/" + route + "/?data=" + JSON.stringify(data), true);
            xhttp.send();
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function getUILayawayData(tableRow) {
            var layaway = {
                Id: tableRow.querySelector("[name='layaway-id']").innerHTML,
                CustomerId: tableRow.querySelector("[name='layaway-customer-id']").innerHTML,
                AgreementDate: tableRow.querySelector("[id='layaway_AgreementDate']").value,
                DueDate: tableRow.querySelector("[id='layaway_DueDate']").value,
                DownPayment: tableRow.querySelector("[id='layaway_DownPayment']").value,
                ServiceFee: tableRow.querySelector("[id='layaway_ServiceFee']").value,
                CancellationFee: tableRow.querySelector("[id='layaway_CancellationFee']").value,
                OrderStatus: tableRow.querySelector("[id='layaway_OrderStatus']").value
            };
            return layaway;
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function getUIInvoiceData(tableRow) {
            var invoice = {
                Id: tableRow.querySelector("[name='invoice-id']").innerHTML,
                InvoiceNumber: parseInt(tableRow.querySelector("[name='invoice-number']").innerText),
                CustomerId: tableRow.querySelector("[name='invoice-customer-id']").innerHTML,
                InvoiceDate: tableRow.querySelector("[id='invoice_InvoiceDate']").value,
                PayerFirstName: tableRow.querySelector("[id='invoice_PayerFirstName']").value,
                PayerLastName: tableRow.querySelector("[id='invoice_PayerLastName']").value,
                PayerCompany: tableRow.querySelector("[id='invoice_PayerCompany']").value,
                PayerStreet: tableRow.querySelector("[id='invoice_PayerStreet']").value,
                PayerCity: tableRow.querySelector("[id='invoice_PayerCity']").value,
                PayerState: tableRow.querySelector("[id='invoice_PayerState']").value,
                PayerZipCode: tableRow.querySelector("[id='invoice_PayerZipCode']").value,
                PayerEmail: tableRow.querySelector("[id='invoice_PayerEmail']").value,
                PayerPhone: tableRow.querySelector("[id='invoice_PayerPhone']").value,
                OrderStatus: tableRow.querySelector("[id='invoice_OrderStatus']").value
            };
            return invoice;
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function getUIPaymentData(tableRow) {
            var payment = {
                PaymentDate: tableRow.querySelector("[name='PaymentDate']").value,
                Amount: tableRow.querySelector("[name='Amount']").value,
                PaymentMode: tableRow.querySelector("[name='PaymentMode']").value,
                CheckNo: tableRow.querySelector("[name='CheckNo']").value,
                CheckWriter: tableRow.querySelector("[name='CheckWriter']").value,
                CheckImage: tableRow.querySelector("[name='CheckImage']").value,
                CreditCardHolder: tableRow.querySelector("[name='CreditCardHolder']").value,                
                CreditCardExpMonth: tableRow.querySelector("[name='CreditCardExpMonth']").value,
                CreditCardExpYear: tableRow.querySelector("[name='CreditCardExpYear']").value,
                CreditCardCVV: tableRow.querySelector("[name='CreditCardCVV']").value,
                CreditCardNo: tableRow.querySelector("[name='CreditCardNo']").value,
                CreditCardName: tableRow.querySelector("[name='CreditCardName']").value,
                ReceivableSource: tableRow.querySelector("[name='ReceivableSource']").innerText,
                ReceivableSourceId: tableRow.querySelector("[name='ReceivableSourceId']").innerText,
                Id: tableRow.querySelector("[name='Id']").innerText
            };
            var message = validatePaymentInput(payment);
            if (!message) {
                if (payment.PaymentMode !== "credit card") {
                    payment.CreditCardExpMonth = 0;
                    payment.CreditCardExpYear = 0;
                }
                return payment;
            }
            else {
                ShowMessage("<div class='text-danger' style='margin-left: 50px'>" + message + "</div>", "<span class='text-warning'>Warning</span>");
                return null;
            }
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function deleteSubItemConfirmHTML(subform, productName, image) {
            let location = window.location;
            let protocol = location.protocol;
            let host = location.host;
            let baseUrl = protocol + "//" + host;
            let imageUrl = baseUrl + "//Content//ProductImages//" + image;

            switch(subform) {
                case "Invoice":
                case "Layaway":
                    break;

                default:
                    return "";
            }
            let mesgHtml = 
                "<div>" +
                    "<div " +
                            "style='display: inline-block; " +
                            "width: 200px; " +
                            "height: 250px; text-align: center; margin-top: auto; margin-bottom: auto'>" +
                        "<img " +
                                "class='img-thumbnail'" +
                                "style='margin: auto; " +
                                "height: 100%;" +
                                "padding: 3px; " +
                                "border-width: 1px;" +
                                "border-radius: 50%;" +
                                "border-color: #f1c2c1'" +
                                "src='" + imageUrl + "'" +
                                "alt='Image' " +
                                "/>" +
                    "</div>" +
                    "<div style='display: inline-block; margin-left: 10px'>" +
                        "<p>Click Delete to remove</p>" +
                        "<p class='text-danger'><strong>" + productName + "</strong></p>" +
                        "<P>from " + subform + ".</P>" +
                    "</div>" +
                "</div>";

            return mesgHtml;
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function deleteLayawayItem(event, itemId, rowIndex, image, productName) {
            // save page state
            savePgState();

            let mesgHtml = deleteSubItemConfirmHTML("Layaway", productName, image);
            let titleHtml = "<span class='text-danger'>Please confirm delete action...</span>";
            ShowMessage(mesgHtml, titleHtml, "delete, cancel").then(
                function (response) {
                    if (response === "Delete") {
                        var xhttp = new XMLHttpRequest();
                        xhttp.onreadystatechange = function () {
                            if (this.readyState === 4 && this.status === 200) {
                                var responseText = this.responseText;
                                var responseObject = JSON.parse(responseText);
                                if (responseObject.Successful === true) {
                                    //
                                    var layawaysContainer = document.getElementById("layaways-container");
                                    var parentRow = layawaysContainer.querySelector("[id='" + rowIndex + "']");
                                    
                                    var quantity = parentRow.querySelector("[name='item-quantity']").innerHTML;
                                    var price = parentRow.querySelector("[id='item_Price']").value;

                                    var deletedItemIndex = parseInt(parentRow.querySelector("[name='layawayitems-row-number']").innerHTML);
                                    var itemsTable = parentRow.parentNode;
                                    itemsTable.removeChild(parentRow);

                                    if (itemsTable.childElementCount === 0) {
                                        //ShowMessage("<p class='text-primary'>Item deleted.</p>").then(function (result) { location.reload(); }, function (error) { });
                                        location.reload();
                                    }
                                    else {
                                        var rows = itemsTable.rows;
                                        for (let i = 0; i < rows.length; i++) {
                                            var row = rows[i];

                                            var rowIndexSpan = row.querySelector("span[name='layawayitems-row-number']");
                                            var itemIndex = parseInt(rowIndexSpan.innerHTML);
                                            if (deletedItemIndex < itemIndex) {
                                                rowIndexSpan.innerHTML = itemIndex - 1;
                                            }

                                            var rowCountSpan = row.querySelector("span[name='layawayitems-row-count']");
                                            var rowCount = parseInt(rowCountSpan.innerHTML);
                                            rowCountSpan.innerHTML = rowCount - 1;
                                        }
                                        updateCustomerTotals("layaways-table", (quantity*price)*-1, getCurrLayawayPgIndex());
                                        //ShowMessage("<p class='text-primary'>Item deleted.</p>")
                                    }
                                }
                                else if (responseObject.Message) {
                                    ShowMessage(responseObject.Message);
                                }
                            }
                        };
                        xhttp.open("GET", "/CustomerManager/DeleteLayawayItem/?id=" + itemId, true);
                        xhttp.send();
                    }
                },
                function (error) {
                    alert("Something went wrong!");
                }
            );
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function deleteInvoiceItem(event, itemId, rowIndex, image, productName) {
            // save page state
            savePgState();
            
            let mesgHtml = deleteSubItemConfirmHTML("Invoice", productName, image);
            let titleHtml = "<span class='text-danger'>Please confirm delete action...</span>";
            ShowMessage(mesgHtml, titleHtml, "delete, cancel").then(
                function (response) {
                    if (response === "Delete") {
                        var xhttp = new XMLHttpRequest();
                        xhttp.onreadystatechange = function () {
                            if (this.readyState === 4 && this.status === 200) {
                                var responseText = this.responseText;
                                var responseObject = JSON.parse(responseText);
                                if (responseObject.Successful === true) {
                                    //
                                    var invoicesContainer = document.getElementById("invoices-container");
                                    var parentRow = invoicesContainer.querySelector("[id='" + rowIndex + "']");

                                    var quantity = parentRow.querySelector("[name='item-quantity']").innerHTML;
                                    var price = parentRow.querySelector("[id='item_Price']").value;                                    

                                    var deletedItemIndex = parseInt(parentRow.querySelector("[name='invoiceitems-row-number']").innerHTML);
                                    var itemsTable = parentRow.parentNode;
                                    itemsTable.removeChild(parentRow);

                                    if (itemsTable.childElementCount === 0) {
                                        //ShowMessage("<p class='text-primary'>Item deleted.</p>").then(function (result) { location.reload(); }, function (error) { });
                                        location.reload();
                                    }
                                    else {
                                        var rows = itemsTable.rows;
                                        for (let i = 0; i < rows.length; i++) {
                                            var row = rows[i];

                                            var rowIndexSpan = row.querySelector("span[name='invoiceitems-row-number']");
                                            var itemIndex = parseInt(rowIndexSpan.innerHTML);
                                            if (deletedItemIndex < itemIndex) {
                                                rowIndexSpan.innerHTML = itemIndex - 1;
                                            }

                                            var rowCountSpan = row.querySelector("span[name='invoiceitems-row-count']");
                                            var rowCount = parseInt(rowCountSpan.innerHTML);
                                            rowCountSpan.innerHTML = rowCount - 1;
                                        }
                                        updateCustomerTotals("invoices-table", (quantity*price)*-1, getCurrInvoicePgIndex());
                                        //ShowMessage("<p class='text-primary'>Item deleted.</p>")
                                    }
                                }
                                else if (responseObject.Message) {
                                    ShowMessage(responseObject.Message);
                                }
                            }
                        };
                        xhttp.open("GET", "/CustomerManager/DeleteInvoiceItem/?id=" + itemId, true);
                        xhttp.send();
                    }
                },
                function (error) {
                    alert("Something went wrong!");
                }
            );
        }
        
        /////////////////////////////////////////////////////////////////////////////////////////////

        function popUpProductDetail(productId) {            
            var xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function () {
                if (this.readyState === 4 && this.status === 200) {
                    var responseText = this.responseText;
                    var responseObject = JSON.parse(responseText);
                    if (responseObject.Id) {
                        //
                        showPopUp(responseObject);
                    }
                    else if (responseObject.Message) {
                        ShowMessage(responseObject.Message);
                    }
                }
            };
            xhttp.open("GET", "/CustomerManager/GetProduct/?id=" + productId, true);
            xhttp.send();

            function showPopUp(product) {
                var location = window.location;
                var protocol = location.protocol;
                var host = location.host;
                var baseUrl = protocol + "//" + host
                var imageUrl = baseUrl + "//Content//ProductImages//" + product.Image;
                var html = `
                    <div>
                         <div style="width: 35%; display: inline-block">
                             <img class="img-rounded img-thumbnail"
                                  src="${imageUrl}" 
                                  style="width: 27%; position: absolute; top: 7%; left: 5%" 
                                  alt="Image" />
                         </div>
                         <div style="width: 50%; display: inline-block">
                            <h3>${product.Name}</h3>
                            <h4 class="text-primary">${product.Description}</h4>
                            <p><strong>Vendor Price: </strong><span class="text-primary pull-right">${parseFloat(product.SupplierPrice).toFixed(2)}</span></p>
                            <p><strong>Price: </strong><span class="text-primary pull-right">${product.Price}</span></p>
                            <p><strong>Wholesale Price: </strong><span class="text-primary pull-right">${product.WholesalePrice}</span></p>
                            <p><strong>Category: </strong><span class="text-primary pull-right">${product.Category}</span></span></span></p>
                            <p><strong>Quantity: </strong><span class="text-primary pull-right">${product.Quantity}</span></p>
                            <p><strong>Min: </strong><span class="text-primary pull-right">${product.QuantityMin}</p>
                            <p><strong>On Layaway: </strong><span class="text-primary pull-right">${product.QuantityOnLayaway}</span></p>
                            <p><strong>Is Service: </strong><span class="text-primary pull-right">${product.IsService}</span></p>
                            <p><strong>UPC: </strong><span class="text-primary pull-right">${product.UPC}</p>
                            <p><strong>Product Code: </strong><span class="text-primary pull-right">${product.ProductCode}</span></p>
                         </div>
                     </div>
                    `;

                ShowMessage(html, "<strong>Product Detail</strong>");
            }
        }
        
        /////////////////////////////////////////////////////////////////////////////////////////////

        function openProductLookup(event, currTargetRecordId, targetform) {
            //
            var recordType = "";
            switch (targetform) {
                case "Invoices": 
                    document.getElementById("curr-invoice-id").innerHtml = currTargetRecordId;
                    recordType = "Invoice"
                    break;                
                case "Layaways":
                    document.getElementById("curr-layaway-id").innerHtml = currTargetRecordId;
                    recordType = "Layaway"
                    break;
                default:
                    return;
            }
            var addBtns = document.querySelectorAll("[name='add-item-to-subform']");
            for (let i = 0; i < addBtns.length; i++) {
                addBtns[i].innerText = "Add To " + recordType;
            }
            document.getElementById("customer-info").style.opacity = 0;
            document.getElementById("product-lookup").style.display = "block";
        }
        
        /////////////////////////////////////////////////////////////////////////////////////////////

        function closeProductLookup(event) {
            document.getElementById("customer-info").style.opacity = 1;
            document.getElementById("product-lookup").style.display = "none";
        }
        
        /////////////////////////////////////////////////////////////////////////////////////////////

        function copyProductData(event, productId, productTableRow = null, currTargetRecordId = "") {
            //
            event.preventDefault();
            var activeSubform = getActiveSubForm();

            // layaways-container
            switch (activeSubform) {
                case "invoices-container":
                    addProductToInvoice(event, productId, productTableRow, currTargetRecordId);
                    break;

                case "layaways-container":
                    addProductToLayaway(event, productId, productTableRow, currTargetRecordId);
                    break;

                default:
                    return;
            }
        }
        
        /////////////////////////////////////////////////////////////////////////////////////////////

        function addProductToInvoice(event, productId, productTableRow = null, currInvoiceId = "") {
            // save page state
            savePgState();
        
            var currInvoiceId = currInvoiceId || document.getElementById("curr-invoice-id").innerHtml;

            var tableRow
            if (!productTableRow) {
                var tableRow = (event.target.parentNode).parentNode;
            }
            else {
                tableRow = productTableRow;
            }

            var productCopyFoundInInvoice = false;
            var invoiceItemId = "";
            var invoicesTable = document.getElementById("invoices-container").querySelector("table");
            
            // loop over Invoices
            for (let invoicesRow of invoicesTable.rows) {
                var invoiceIdElement = invoicesRow.querySelector("[name='invoice-id']");
                var invoiceId = invoiceIdElement.innerHTML;
                if (currInvoiceId === invoiceId) {
                    var invoiceItemsTable = invoicesRow.querySelector("table");
                    // loop over InvoiceItems
                    for (let invoiceItemsRow of invoiceItemsTable.rows) {
                        var invoiceItemIdElement = invoiceItemsRow.querySelector("[name='invoiceitem-item-id']");
                        invoiceItemId = invoiceItemIdElement.innerHTML;

                        var invoiceProductIdElement = invoiceItemsRow.querySelector("[name='invoiceitem-product-id']");
                        var invoiceProductId = invoiceProductIdElement.innerHTML;

                        var invoiceItemQuantityElement = invoiceItemsRow.querySelector("[name='invoiceitem-quantity']");
                        var invoiceItemQuantity = invoiceItemQuantityElement.innerHTML;
                        ++invoiceItemQuantity;

                        if (productId === invoiceProductId) {
                            productCopyFoundInInvoice = true;
                            break;
                        }
                    }
                    break;
                }
            }

            if (productCopyFoundInInvoice) {
                //upload (update) data for Quantity field of Product record
                var xhttp = new XMLHttpRequest();
                xhttp.onreadystatechange = function () {
                    if (this.readyState === 4 && this.status === 200) {
                        var responseText = this.responseText;
                        var responseObject = JSON.parse(responseText);
                        if (responseObject.Successful === true) {
                            //ShowMessage("<p class='text-primary'>Item updated.</p>").then(function (result) { location.reload(); }, function (error) { });
                            location.reload();
                        }
                        else if (responseObject.Message) {
                            ShowMessage(responseObject.Message, "<span class='text-warning'>Server Error</span>");
                        }
                        else {
                            ShowMessage("Oops! Something went wrong.", "<span class='text-warning'>Server Error</span>");
                        }
                    }
                };
                xhttp.open("GET", "/CustomerManager/UpdateInvoiceItemQuantity/?Id=" + invoiceItemId + "&quantity=" + invoiceItemQuantity, true);
                xhttp.send();
            }
            else {
                // get product data from the Product Search List UI
                var invoiceItem = {
                    Id: "",
                    InvoiceId: invoiceId,
                    ProductId: tableRow.querySelector("span[name='Id']").innerText,
                    ProductName: tableRow.querySelector("span[name='Name']").innerText,
                    ProductDescription: tableRow.querySelector("span[name='Description']").innerText,
                    Price: tableRow.querySelector("span[name='Price']").innerText,
                    Quantity: 1,
                    Image: tableRow.querySelector("span[name='Image']").innerText
                }
                //upload (reate) data for entire Product record
                var xhttp = new XMLHttpRequest();
                xhttp.onreadystatechange = function () {
                    if (this.readyState === 4 && this.status === 200) {
                        var responseText = this.responseText;
                        var responseObject = JSON.parse(responseText);
                        if (responseObject.Successful === true) {
                            //ShowMessage("<p class='text-primary'>Item added.</p>").then(function (result) { location.reload(); }, function (error) { });
                            location.reload();
                        }
                        else if (responseObject.Message) {
                            ShowMessage(responseObject.Message);
                        }
                    }
                };
                xhttp.open("GET", "/CustomerManager/AddInvoiceItem/?data=" + JSON.stringify(invoiceItem), true);
                xhttp.send();
            }

            // clean up
            document.getElementById("curr-invoice-id").innerHtml = "";
        }
        
        /////////////////////////////////////////////////////////////////////////////////////////////

        function addProductToLayaway(event, productId, productTableRow = null, currLayawayId = "") {
            // save page state
            savePgState();

            var currLayawayId = currLayawayId || document.getElementById("curr-layaway-id").innerHtml;

            var tableRow
            if (!productTableRow) {
                var tableRow = (event.target.parentNode).parentNode;
            }
            else {
                tableRow = productTableRow;
            }

            var productCopyFoundInLayaway = false;
            var layawayItemId = "";
            var layawaysTable = document.getElementById("layaways-container").querySelector("table");

            // loop over Layaways
            for (let layawaysRow of layawaysTable.rows) {
                var layawayIdElement = layawaysRow.querySelector("[name='layaway-id']");
                var layawayId = layawayIdElement.innerHTML;
                if (currLayawayId === layawayId) {
                    var layawayItemsTable = layawaysRow.querySelector("table");
                    // loop over LayawayItems
                    for (let layawayItemsRow of layawayItemsTable.rows) {
                        var layawayItemIdElement = layawayItemsRow.querySelector("[name='layawayitem-item-id']");
                        layawayItemId = layawayItemIdElement.innerHTML;

                        var layawayProductIdElement = layawayItemsRow.querySelector("[name='layawayitem-product-id']");
                        var layawayProductId = layawayProductIdElement.innerHTML;

                        var layawayItemQuantityElement = layawayItemsRow.querySelector("[name='layawayitem-quantity']");
                        var layawayItemQuantity = layawayItemQuantityElement.innerHTML;
                        ++layawayItemQuantity;

                        if (productId === layawayProductId) {
                            productCopyFoundInLayaway = true;
                            break;
                        }
                    }
                    break;
                }
            }

            if (productCopyFoundInLayaway) {
                //upload (update) data for Quantity field of Product record
                var xhttp = new XMLHttpRequest();
                xhttp.onreadystatechange = function () {
                    if (this.readyState === 4 && this.status === 200) {
                        var responseText = this.responseText;
                        var responseObject = JSON.parse(responseText);
                        if (responseObject.Successful === true) {
                            //ShowMessage("<p class='text-primary'>Item updated.</p>").then(function (result) { location.reload(); }, function (error) { });
                            location.reload();
                        }
                        else if (responseObject.Message) {
                            ShowMessage(responseObject.Message, "<span class='text-warning'>Server Error</span>");
                        }
                        else {
                            ShowMessage("Oops! Something went wrong.", "<span class='text-warning'>Server Error</span>");
                        }
                    }
                };
                xhttp.open("GET", "/CustomerManager/UpdateLayawayItemQuantity/?Id=" + layawayItemId + "&quantity=" + layawayItemQuantity, true);
                xhttp.send();
            }
            else {
                // get product data from the Product Search List UI
                var layawayItem = {
                    Id: "",
                    LayawayId: layawayId,
                    ProductId: tableRow.querySelector("span[name='Id']").innerText,
                    ProductName: tableRow.querySelector("span[name='Name']").innerText,
                    ProductDescription: tableRow.querySelector("span[name='Description']").innerText,
                    Price: tableRow.querySelector("span[name='Price']").innerText,
                    Quantity: 1,
                    Image: tableRow.querySelector("span[name='Image']").innerText
                }
                //upload (reate) data for entire Product record
                var xhttp = new XMLHttpRequest();
                xhttp.onreadystatechange = function () {
                    if (this.readyState === 4 && this.status === 200) {
                        var responseText = this.responseText;
                        var responseObject = JSON.parse(responseText);
                        if (responseObject.Successful === true) {
                            //ShowMessage("<p class='text-primary'>Item added.</p>").then(function (result) { location.reload(); }, function (error) { });
                            location.reload();
                        }
                        else if (responseObject.Message) {
                            ShowMessage(responseObject.Message);
                        }
                    }
                };
                xhttp.open("GET", "/CustomerManager/AddLayawayItem/?data=" + JSON.stringify(layawayItem), true);
                xhttp.send();
            }

            // clean up
            document.getElementById("curr-layaway-id").innerHtml = "";
        }

        /////////////////////////////////////////////////////////////////////////////////////////////
                
        function getParent(element, tagName) {
            var parent = element.parentNode;
            if (parent.nodeName.toLowerCase() === tagName.toLowerCase()) {
                result = parent;
                return parent;
            }
            else {
                return getParent(parent, tagName);
            }
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function navFirst(event, siblingTable = "") {
            //
            var table = getParent(event.target, "table");
            var tableElementId = table.id;      // e.g. id="invoices-table"
            var currRow = getParent(event.target, "tr");
            var currRowIndexElement = currRow.querySelector("[name='" + tableElementId + "-row-number']");
            //
            if (siblingTable) {
                // get currRowIndex from 'alt' row-number element
                currRowIndexElement = currRow.querySelector("[name='" + siblingTable + "-row-number-alt']");
                currRowIndex = parseInt(currRowIndexElement.innerText);
                table = table.querySelector("table[id='" + siblingTable + "']");
                tableElementId = table.id;      // e.g. id="payments-table"
            }
            //
            var rows = table.rows;
            for (let i = 0; i < rows.length; i++) {
                var row = rows[i];
                var rowIndex = parseInt(row.querySelector("[name='" + tableElementId + "-row-number']").innerText);
                if (rowIndex !== 1) {
                    // hide row
                    row.classList.add("hidden");
                }
                else {
                    // show First row
                    row.classList.remove("hidden");
                    if (siblingTable) {
                        currRowIndexElement.innerText = 1;
                    }
                }
            }
            savePgState();
        }
        
        /////////////////////////////////////////////////////////////////////////////////////////////

        function navPrev(event, siblingTable = "") {
            //
            var table = getParent(event.target, "table");
            var tableElementId = table.id;
            var currRow = getParent(event.target, "tr");
            var currRowIndexElement = currRow.querySelector("[name='" + tableElementId + "-row-number']");
            var currRowIndex = parseInt(currRowIndexElement.innerText);
            //
            if (siblingTable) {
                // get currRowIndex from 'alt' row-number element
                currRowIndexElement = currRow.querySelector("[name='" + siblingTable + "-row-number-alt']");
                currRowIndex = parseInt(currRowIndexElement.innerText);
                table = table.querySelector("table[id='" + siblingTable + "']");
                tableElementId = table.id;
            }
            //
            if (currRowIndex === 1) return;
            var rows = table.rows;
            for (let i = 0; i < rows.length; i++) {
                var row = rows[i];
                var rowIndex = parseInt(row.querySelector("[name='" + tableElementId + "-row-number']").innerText);
                if (rowIndex !== currRowIndex - 1) {
                    // hide row
                    row.classList.add("hidden");
                }
                else {
                    // show Previous row
                    row.classList.remove("hidden");
                    if (siblingTable) {
                        currRowIndexElement.innerText = currRowIndex - 1;
                    }
                }
            }
            savePgState();
        }
        
        /////////////////////////////////////////////////////////////////////////////////////////////

        function navNext(event, siblingTable = "") {
            //
            var table = getParent(event.target, "table");
            var tableName = table.id;      // e.g. id="invoices-table"
            var currRow = getParent(event.target, "tr");
            var currRowIndexElement = currRow.querySelector("[name='" + tableName + "-row-number']");
            var currRowIndex = parseInt(currRowIndexElement.innerText);
            //
            if (siblingTable) {
                // get currRowIndex from 'alt' row-number element
                currRowIndexElement = currRow.querySelector("[name='" + siblingTable + "-row-number-alt']");
                currRowIndex = parseInt(currRowIndexElement.innerText);
                table = table.querySelector("table[id='" + siblingTable + "']");
                tableName = table.id;
            }
            //
            var rows = table.rows;                        
            if (currRowIndex === rows.length) return;
            for (let i = 0; i < rows.length; i++) {
                var row = rows[i];
                var rowIndexSpan = row.querySelector("[name='" + tableName + "-row-number']")
                var rowIndex = parseInt(rowIndexSpan.innerText);
                if (rowIndex !== currRowIndex + 1) {
                    // hide row
                    row.classList.add("hidden");
                }
                else {
                    // show Next row
                    row.classList.remove("hidden");
                    if (siblingTable) {
                        currRowIndexElement.innerText = currRowIndex + 1;
                    }
                }
            }
            savePgState();
        }
        
        /////////////////////////////////////////////////////////////////////////////////////////////

        function navLast(event, siblingTable = "") {
            //
            var table = getParent(event.target, "table");
            var tableElementId = table.id;      // e.g. id="invoices-table"
            var currRow = getParent(event.target, "tr");
            var currRowIndexElement = currRow.querySelector("[name='" + tableElementId + "-row-number']");
            //
            if (siblingTable) {
                // get currRowIndex from 'alt' row-number element
                currRowIndexElement = currRow.querySelector("[name='" + siblingTable + "-row-number-alt']");
                currRowIndex = parseInt(currRowIndexElement.innerText);
                table = table.querySelector("table[id='" + siblingTable + "']");
                tableElementId = table.id;      // e.g. id="payments-table"
            }
            //
            var rows = table.rows;
            for (let i = 0; i < rows.length; i++) {
                var row = rows[i];
                var rowIndex = parseInt(row.querySelector("[name='" + tableElementId + "-row-number']").innerText);
                if (rowIndex !== rows.length) {
                    // hide row
                    row.classList.add("hidden");
                }
                else {
                    // show Last row
                    row.classList.remove("hidden");
                    if (siblingTable) {
                        currRowIndexElement.innerText = rows.length;
                    }
                }
            }
            savePgState();
        }
        
        /////////////////////////////////////////////////////////////////////////////////////////////

        function toggleBarcodeInput(event) {
            var container = event.target.parentNode.querySelector("[name='upc-input-container']")
            if (container.classList.contains("hidden")) {
                container.classList.remove("hidden");
                event.target.parentNode.querySelector("[name='scan-upc']").classList.add("active");
                container.querySelector("[name='upc-input']").focus();
            }
            else {
                container.classList.add("hidden");
                event.target.parentNode.querySelector("[name='scan-upc']").classList.remove("active");
            }
        }
        
        /////////////////////////////////////////////////////////////////////////////////////////////

        function getProductByUPC(event, requestorId, requestingForm) {
            if (event.keyCode !== 13) return;
            
            var currIdElement = "";
            switch (requestingForm) {
                case "Invoice":
                    currIdElement = "curr-invoice-id";
                    break;
                case "Layaway":
                    currIdElement = "curr-layaway-id";
                    break;
                default:
                    return;
            }

            document.getElementById(currIdElement).innerHTML = requestorId;
            var searchUPC = event.target.value;
            event.target.value = "";

            if (searchUPC.trim() === "") {
                event.target.parentNode.classList.add("hidden");
                return;
            }

            var table = document.getElementById("product-lookup-table");
            
            var rows = table.getElementsByTagName("tr");
            for (i = 0; i < rows.length; i++) {
                var row = rows[i];
                var upc = row.querySelector("span[name='UPC']").innerHTML;
                if (upc === searchUPC) {
                    // add product to current subform record                    
                    var productId = row.querySelector("span[name='Id']").innerHTML;
                    copyProductData(event, productId, row, requestorId);
                    return;
                }
            }
            ShowMessage("<h3 class='text-primary'>Product <span class='text-danger'>'" + searchUPC + "'</span> not found.</h3>")
        }
        
        /////////////////////////////////////////////////////////////////////////////////////////////

        function showLayawayItemSaveBtn(event) {
            var btn = event.target.parentNode.querySelector("input[name='layaway-item-save'], button[name='layaway-item-save']");
            btn.classList.remove("hidden");
        }
        
        /////////////////////////////////////////////////////////////////////////////////////////////

        function showInvoiceItemSaveBtn(event) {
            var btn = event.target.parentNode.querySelector("input[name='invoice-item-save'], button[name='invoice-item-save']");
            btn.classList.remove("hidden");
        }
        
        /////////////////////////////////////////////////////////////////////////////////////////////

        function updateLayawayItemPrice(event, itemId) {
            var parent = getParent(event.target, "tr");
            var btn = parent.querySelector("button");

            var oldValueSpan = parent.querySelector("[name='PriceOldValue']");
            var oldValue = parseFloat(oldValueSpan.innerText);
            var lineTotalSpan = parent.querySelector("[name='line-total']");
            var quantity = parseInt(parent.querySelector("[name='item-quantity']").innerText);

            var priceInput = parent.querySelector("input[type='text']");
            var price = priceInput.value;
            if (isNaN(price) || price === "" || parseFloat(price) < 0) {
                ShowMessage("The price must be a number greater than zero.");
                return;
            }
            var amountChange = parseFloat(price) - oldValue;

            //upload data
            var xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function () {
                if (this.readyState === 4 && this.status === 200) {
                    var responseText = this.responseText;
                    var responseObject = JSON.parse(responseText);
                    if (responseObject.Successful === true) {
                        priceInput.value = parseFloat(price).toFixed(2);
                        lineTotalSpan.innerText = (quantity * parseFloat(price)).toFixed(2);
                        btn.classList.add("hidden");
                        updateCustomerTotals("invoices-table", amountChange, getCurrInvoicePgIndex());
                        oldValueSpan.innerText = price;
                    }
                    else if (responseObject.Message) {
                        ShowMessage(responseObject.Message, "<span class='text-warning'>Server Error</span>");
                    }
                }
            };
            xhttp.open("GET", "/CustomerManager/UpdateLayawayItemPrice/?Id=" + itemId + "&price=" + price, true);
            xhttp.send();
        }
        
        /////////////////////////////////////////////////////////////////////////////////////////////

        function updateInvoiceItemPrice(event, itemId) {
            var parent = getParent(event.target, "tr");
            var btn = parent.querySelector("button");

            var oldValueSpan = parent.querySelector("[name='PriceOldValue']");
            var oldValue = parseFloat(oldValueSpan.innerText);
            var lineTotalSpan = parent.querySelector("[name='line-total']");
            var quantity = parseInt(parent.querySelector("[name='item-quantity']").innerText);

            var priceInput = parent.querySelector("input[type='text']");
            var price = priceInput.value;
            if (isNaN(price) || price === "" || parseFloat(price) < 0) {
                ShowMessage("The price must be a number greater than zero.");
                return;
            }
            var amountChange = parseFloat(price) - oldValue;

            //upload data
            var xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function () {
                if (this.readyState === 4 && this.status === 200) {
                    var responseText = this.responseText;
                    var responseObject = JSON.parse(responseText);
                    if (responseObject.Successful === true) {
                        var oldPrice = responseObject.OldValue;
                        priceInput.value = parseFloat(price).toFixed(2);
                        lineTotalSpan.innerText = (quantity * parseFloat(price)).toFixed(2);
                        btn.classList.add("hidden");
                        updateCustomerTotals("invoices-table", amountChange, getCurrInvoicePgIndex());
                        oldValueSpan.innerText = price;
                    }
                    else if (responseObject.Message) {
                        ShowMessage(responseObject.Message, "<span class='text-warning'>Server Error</span>");
                    }
                }
            };
            xhttp.open("GET", "/CustomerManager/UpdateInvoiceItemPrice/?Id=" + itemId + "&price=" + price, true);
            xhttp.send();
        }
        
        /////////////////////////////////////////////////////////////////////////////////////////////

        function showSubformSaveBtn(event) {
            var tableRow = getParent(event.target, "tr");            

            var btn = tableRow.querySelector("input[name='subform-save'], button[name='subform-save']");
            btn.classList.remove("hidden");

            var scanUpcBtn = tableRow.querySelector("[name='scan-upc']");
            scanUpcBtn.classList.add("hidden");
        }
        
        /////////////////////////////////////////////////////////////////////////////////////////////

        function updateLayaway(event, itemId) {
            var parent = getParent(event.target, "tr");
            var priceInput = parent.querySelector("input[type='text']");
            var price = priceInput.value;
            if (isNaN(price) || price < 0) {
                ShowMessage("The price must be a number greater than zero.");
                return;
            }
            //upload data
            var xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function () {
                if (this.readyState === 4 && this.status === 200) {
                    var responseText = this.responseText;
                    var responseObject = JSON.parse(responseText);
                    if (responseObject.Successful === true) {
                        priceInput.value = parseFloat(price).toFixed(2);
                        event.target.style.display = "none";
                    }
                    else if (responseObject.Message) {
                        ShowMessage(responseObject.Message, "<span class='text-warning'>Server Error</span>");
                    }
                }
            };
            xhttp.open("GET", "/CustomerManager/UpdateLayawayItemPrice/?Id=" + itemId + "&price=" + price, true);
            xhttp.send();
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function addPayment(event, modelName) {
            //
            var btn = event.target;
            var tableRow = getParent(btn, "tr");
            var scanUpcBtn = tableRow.querySelector("[name='scan-upc']");
            var productLookupBtn = tableRow.querySelector("[name='product-lookup']");
            var chargeItemsBtn = tableRow.querySelector("[name='charge-items']");
            var subItemsTable = tableRow.querySelector("[id='sub-items-table']");
            var newPatmentDiv = tableRow.querySelector("[id='new-payment']");
            var paymentsDiv = tableRow.querySelector("[id='payments-table']");
            var upcInput = tableRow.querySelector("[name='upc-input-container']");
            
            scanUpcBtn.classList.add("hidden");
            productLookupBtn.classList.add("hidden");
            chargeItemsBtn.classList.remove("hidden");
            subItemsTable.classList.add("hidden");
            paymentsDiv.classList.add("hidden");
            newPatmentDiv.classList.remove("hidden");
            upcInput.classList.add("hidden");

            scanUpcBtn.classList.remove("active");

            var receivableSrcIdOrigin = tableRow.querySelector("[id='receivable-source-id']");
            var receivableSrcIdDest = tableRow.querySelector("[name='ReceivableSourceId']");
            receivableSrcIdDest.innerText = receivableSrcIdOrigin.innerHTML;

            var receivableSrcDest = tableRow.querySelector("[name='ReceivableSource']");
            receivableSrcDest.innerText = modelName;

            closeProductLookup(event);

            var paymentMode = tableRow.querySelector("[name='PaymentMode']").value;
            if (paymentMode === "credit card") {
                tableRow.querySelector("[id='creditcard-group']").classList.remove("hidden");
            }
            else if (paymentMode === "check") {
                tableRow.querySelector("[id='check-group']").classList.remove("hidden");
            }
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function showPayments(event) {
            //
            var btn = event.target;
            var tableRow = getParent(btn, "tr");
            var scanUpcBtn = tableRow.querySelector("[name='scan-upc']");
            var productLookupBtn = tableRow.querySelector("[name='product-lookup']");
            var chargeItemsBtn = tableRow.querySelector("[name='charge-items']");
            var subItemsTable = tableRow.querySelector("[id='sub-items-table']");
            var newPaymentDiv = tableRow.querySelector("[id='new-payment']");
            var paymentsDiv = tableRow.querySelector("[id='payments-table']");
            var upcInput = tableRow.querySelector("[name='upc-input-container']");
            
            scanUpcBtn.classList.add("hidden");
            productLookupBtn.classList.add("hidden");
            chargeItemsBtn.classList.remove("hidden");
            subItemsTable.classList.add("hidden");
            newPaymentDiv.classList.add("hidden");
            paymentsDiv.classList.remove("hidden");
            upcInput.classList.add("hidden");

            scanUpcBtn.classList.remove("active");
            closeProductLookup(event);
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        function showChargeItems(event) {
            //
            var btn = event.target;
            var tableRow = getParent(btn, "tr");
            var scanUpcBtn = tableRow.querySelector("[name='scan-upc']");
            var productLookupBtn = tableRow.querySelector("[name='product-lookup']");
            var chargeItemsBtn = tableRow.querySelector("[name='charge-items']");
            var subItemsTable = tableRow.querySelector("[id='sub-items-table']");
            var newPatmentDiv = tableRow.querySelector("[id='new-payment']");
            var paymentsDiv = tableRow.querySelector("[id='payments-table']");
            
            scanUpcBtn.classList.remove("hidden");
            productLookupBtn.classList.remove("hidden");
            chargeItemsBtn.classList.add("hidden");
            subItemsTable.classList.remove("hidden");
            newPatmentDiv.classList.add("hidden");
            paymentsDiv.classList.add("hidden");
        }
        
        /////////////////////////////////////////////////////////////////////////////////////////////
    </script>
}